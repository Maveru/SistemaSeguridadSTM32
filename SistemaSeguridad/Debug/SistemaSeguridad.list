
SistemaSeguridad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004394  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800451c  0800451c  0001451c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004534  08004534  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004534  08004534  00014534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800453c  0800453c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800453c  0800453c  0001453c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004540  08004540  00014540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000001a0  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001b0  200001b0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d060  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a9b  00000000  00000000  0002d0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d18  00000000  00000000  0002eb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c78  00000000  00000000  0002f858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000208be  00000000  00000000  000304d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000da30  00000000  00000000  00050d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca4cf  00000000  00000000  0005e7be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00128c8d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003924  00000000  00000000  00128ce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004504 	.word	0x08004504

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004504 	.word	0x08004504

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b96e 	b.w	8000c98 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	468c      	mov	ip, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	f040 8083 	bne.w	8000aea <__udivmoddi4+0x116>
 80009e4:	428a      	cmp	r2, r1
 80009e6:	4617      	mov	r7, r2
 80009e8:	d947      	bls.n	8000a7a <__udivmoddi4+0xa6>
 80009ea:	fab2 f282 	clz	r2, r2
 80009ee:	b142      	cbz	r2, 8000a02 <__udivmoddi4+0x2e>
 80009f0:	f1c2 0020 	rsb	r0, r2, #32
 80009f4:	fa24 f000 	lsr.w	r0, r4, r0
 80009f8:	4091      	lsls	r1, r2
 80009fa:	4097      	lsls	r7, r2
 80009fc:	ea40 0c01 	orr.w	ip, r0, r1
 8000a00:	4094      	lsls	r4, r2
 8000a02:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a06:	0c23      	lsrs	r3, r4, #16
 8000a08:	fbbc f6f8 	udiv	r6, ip, r8
 8000a0c:	fa1f fe87 	uxth.w	lr, r7
 8000a10:	fb08 c116 	mls	r1, r8, r6, ip
 8000a14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a18:	fb06 f10e 	mul.w	r1, r6, lr
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d909      	bls.n	8000a34 <__udivmoddi4+0x60>
 8000a20:	18fb      	adds	r3, r7, r3
 8000a22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a26:	f080 8119 	bcs.w	8000c5c <__udivmoddi4+0x288>
 8000a2a:	4299      	cmp	r1, r3
 8000a2c:	f240 8116 	bls.w	8000c5c <__udivmoddi4+0x288>
 8000a30:	3e02      	subs	r6, #2
 8000a32:	443b      	add	r3, r7
 8000a34:	1a5b      	subs	r3, r3, r1
 8000a36:	b2a4      	uxth	r4, r4
 8000a38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a48:	45a6      	cmp	lr, r4
 8000a4a:	d909      	bls.n	8000a60 <__udivmoddi4+0x8c>
 8000a4c:	193c      	adds	r4, r7, r4
 8000a4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a52:	f080 8105 	bcs.w	8000c60 <__udivmoddi4+0x28c>
 8000a56:	45a6      	cmp	lr, r4
 8000a58:	f240 8102 	bls.w	8000c60 <__udivmoddi4+0x28c>
 8000a5c:	3802      	subs	r0, #2
 8000a5e:	443c      	add	r4, r7
 8000a60:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a64:	eba4 040e 	sub.w	r4, r4, lr
 8000a68:	2600      	movs	r6, #0
 8000a6a:	b11d      	cbz	r5, 8000a74 <__udivmoddi4+0xa0>
 8000a6c:	40d4      	lsrs	r4, r2
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e9c5 4300 	strd	r4, r3, [r5]
 8000a74:	4631      	mov	r1, r6
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	b902      	cbnz	r2, 8000a7e <__udivmoddi4+0xaa>
 8000a7c:	deff      	udf	#255	; 0xff
 8000a7e:	fab2 f282 	clz	r2, r2
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d150      	bne.n	8000b28 <__udivmoddi4+0x154>
 8000a86:	1bcb      	subs	r3, r1, r7
 8000a88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a8c:	fa1f f887 	uxth.w	r8, r7
 8000a90:	2601      	movs	r6, #1
 8000a92:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a96:	0c21      	lsrs	r1, r4, #16
 8000a98:	fb0e 331c 	mls	r3, lr, ip, r3
 8000a9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000aa0:	fb08 f30c 	mul.w	r3, r8, ip
 8000aa4:	428b      	cmp	r3, r1
 8000aa6:	d907      	bls.n	8000ab8 <__udivmoddi4+0xe4>
 8000aa8:	1879      	adds	r1, r7, r1
 8000aaa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000aae:	d202      	bcs.n	8000ab6 <__udivmoddi4+0xe2>
 8000ab0:	428b      	cmp	r3, r1
 8000ab2:	f200 80e9 	bhi.w	8000c88 <__udivmoddi4+0x2b4>
 8000ab6:	4684      	mov	ip, r0
 8000ab8:	1ac9      	subs	r1, r1, r3
 8000aba:	b2a3      	uxth	r3, r4
 8000abc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ac0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ac4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ac8:	fb08 f800 	mul.w	r8, r8, r0
 8000acc:	45a0      	cmp	r8, r4
 8000ace:	d907      	bls.n	8000ae0 <__udivmoddi4+0x10c>
 8000ad0:	193c      	adds	r4, r7, r4
 8000ad2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ad6:	d202      	bcs.n	8000ade <__udivmoddi4+0x10a>
 8000ad8:	45a0      	cmp	r8, r4
 8000ada:	f200 80d9 	bhi.w	8000c90 <__udivmoddi4+0x2bc>
 8000ade:	4618      	mov	r0, r3
 8000ae0:	eba4 0408 	sub.w	r4, r4, r8
 8000ae4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ae8:	e7bf      	b.n	8000a6a <__udivmoddi4+0x96>
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d909      	bls.n	8000b02 <__udivmoddi4+0x12e>
 8000aee:	2d00      	cmp	r5, #0
 8000af0:	f000 80b1 	beq.w	8000c56 <__udivmoddi4+0x282>
 8000af4:	2600      	movs	r6, #0
 8000af6:	e9c5 0100 	strd	r0, r1, [r5]
 8000afa:	4630      	mov	r0, r6
 8000afc:	4631      	mov	r1, r6
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	fab3 f683 	clz	r6, r3
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	d14a      	bne.n	8000ba0 <__udivmoddi4+0x1cc>
 8000b0a:	428b      	cmp	r3, r1
 8000b0c:	d302      	bcc.n	8000b14 <__udivmoddi4+0x140>
 8000b0e:	4282      	cmp	r2, r0
 8000b10:	f200 80b8 	bhi.w	8000c84 <__udivmoddi4+0x2b0>
 8000b14:	1a84      	subs	r4, r0, r2
 8000b16:	eb61 0103 	sbc.w	r1, r1, r3
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	468c      	mov	ip, r1
 8000b1e:	2d00      	cmp	r5, #0
 8000b20:	d0a8      	beq.n	8000a74 <__udivmoddi4+0xa0>
 8000b22:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b26:	e7a5      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000b28:	f1c2 0320 	rsb	r3, r2, #32
 8000b2c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b30:	4097      	lsls	r7, r2
 8000b32:	fa01 f002 	lsl.w	r0, r1, r2
 8000b36:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b3a:	40d9      	lsrs	r1, r3
 8000b3c:	4330      	orrs	r0, r6
 8000b3e:	0c03      	lsrs	r3, r0, #16
 8000b40:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b50:	fb06 f108 	mul.w	r1, r6, r8
 8000b54:	4299      	cmp	r1, r3
 8000b56:	fa04 f402 	lsl.w	r4, r4, r2
 8000b5a:	d909      	bls.n	8000b70 <__udivmoddi4+0x19c>
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b62:	f080 808d 	bcs.w	8000c80 <__udivmoddi4+0x2ac>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 808a 	bls.w	8000c80 <__udivmoddi4+0x2ac>
 8000b6c:	3e02      	subs	r6, #2
 8000b6e:	443b      	add	r3, r7
 8000b70:	1a5b      	subs	r3, r3, r1
 8000b72:	b281      	uxth	r1, r0
 8000b74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b80:	fb00 f308 	mul.w	r3, r0, r8
 8000b84:	428b      	cmp	r3, r1
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x1c4>
 8000b88:	1879      	adds	r1, r7, r1
 8000b8a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b8e:	d273      	bcs.n	8000c78 <__udivmoddi4+0x2a4>
 8000b90:	428b      	cmp	r3, r1
 8000b92:	d971      	bls.n	8000c78 <__udivmoddi4+0x2a4>
 8000b94:	3802      	subs	r0, #2
 8000b96:	4439      	add	r1, r7
 8000b98:	1acb      	subs	r3, r1, r3
 8000b9a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000b9e:	e778      	b.n	8000a92 <__udivmoddi4+0xbe>
 8000ba0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ba4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ba8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bac:	431c      	orrs	r4, r3
 8000bae:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bb2:	fa01 f306 	lsl.w	r3, r1, r6
 8000bb6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bba:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bbe:	431f      	orrs	r7, r3
 8000bc0:	0c3b      	lsrs	r3, r7, #16
 8000bc2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bc6:	fa1f f884 	uxth.w	r8, r4
 8000bca:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000bd2:	fb09 fa08 	mul.w	sl, r9, r8
 8000bd6:	458a      	cmp	sl, r1
 8000bd8:	fa02 f206 	lsl.w	r2, r2, r6
 8000bdc:	fa00 f306 	lsl.w	r3, r0, r6
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x220>
 8000be2:	1861      	adds	r1, r4, r1
 8000be4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000be8:	d248      	bcs.n	8000c7c <__udivmoddi4+0x2a8>
 8000bea:	458a      	cmp	sl, r1
 8000bec:	d946      	bls.n	8000c7c <__udivmoddi4+0x2a8>
 8000bee:	f1a9 0902 	sub.w	r9, r9, #2
 8000bf2:	4421      	add	r1, r4
 8000bf4:	eba1 010a 	sub.w	r1, r1, sl
 8000bf8:	b2bf      	uxth	r7, r7
 8000bfa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bfe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c02:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c06:	fb00 f808 	mul.w	r8, r0, r8
 8000c0a:	45b8      	cmp	r8, r7
 8000c0c:	d907      	bls.n	8000c1e <__udivmoddi4+0x24a>
 8000c0e:	19e7      	adds	r7, r4, r7
 8000c10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c14:	d22e      	bcs.n	8000c74 <__udivmoddi4+0x2a0>
 8000c16:	45b8      	cmp	r8, r7
 8000c18:	d92c      	bls.n	8000c74 <__udivmoddi4+0x2a0>
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	4427      	add	r7, r4
 8000c1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c22:	eba7 0708 	sub.w	r7, r7, r8
 8000c26:	fba0 8902 	umull	r8, r9, r0, r2
 8000c2a:	454f      	cmp	r7, r9
 8000c2c:	46c6      	mov	lr, r8
 8000c2e:	4649      	mov	r1, r9
 8000c30:	d31a      	bcc.n	8000c68 <__udivmoddi4+0x294>
 8000c32:	d017      	beq.n	8000c64 <__udivmoddi4+0x290>
 8000c34:	b15d      	cbz	r5, 8000c4e <__udivmoddi4+0x27a>
 8000c36:	ebb3 020e 	subs.w	r2, r3, lr
 8000c3a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c3e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c42:	40f2      	lsrs	r2, r6
 8000c44:	ea4c 0202 	orr.w	r2, ip, r2
 8000c48:	40f7      	lsrs	r7, r6
 8000c4a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c4e:	2600      	movs	r6, #0
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	462e      	mov	r6, r5
 8000c58:	4628      	mov	r0, r5
 8000c5a:	e70b      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000c5c:	4606      	mov	r6, r0
 8000c5e:	e6e9      	b.n	8000a34 <__udivmoddi4+0x60>
 8000c60:	4618      	mov	r0, r3
 8000c62:	e6fd      	b.n	8000a60 <__udivmoddi4+0x8c>
 8000c64:	4543      	cmp	r3, r8
 8000c66:	d2e5      	bcs.n	8000c34 <__udivmoddi4+0x260>
 8000c68:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c6c:	eb69 0104 	sbc.w	r1, r9, r4
 8000c70:	3801      	subs	r0, #1
 8000c72:	e7df      	b.n	8000c34 <__udivmoddi4+0x260>
 8000c74:	4608      	mov	r0, r1
 8000c76:	e7d2      	b.n	8000c1e <__udivmoddi4+0x24a>
 8000c78:	4660      	mov	r0, ip
 8000c7a:	e78d      	b.n	8000b98 <__udivmoddi4+0x1c4>
 8000c7c:	4681      	mov	r9, r0
 8000c7e:	e7b9      	b.n	8000bf4 <__udivmoddi4+0x220>
 8000c80:	4666      	mov	r6, ip
 8000c82:	e775      	b.n	8000b70 <__udivmoddi4+0x19c>
 8000c84:	4630      	mov	r0, r6
 8000c86:	e74a      	b.n	8000b1e <__udivmoddi4+0x14a>
 8000c88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c8c:	4439      	add	r1, r7
 8000c8e:	e713      	b.n	8000ab8 <__udivmoddi4+0xe4>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443c      	add	r4, r7
 8000c94:	e724      	b.n	8000ae0 <__udivmoddi4+0x10c>
 8000c96:	bf00      	nop

08000c98 <__aeabi_idiv0>:
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <EscribePass>:


uint32_t adcValue;


void EscribePass(){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,1);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ca6:	4832      	ldr	r0, [pc, #200]	; (8000d70 <EscribePass+0xd4>)
 8000ca8:	f001 fe5a 	bl	8002960 <HAL_GPIO_WritePin>
	//EscribirPass = 0;
	if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1) == 1 ){
 8000cac:	2102      	movs	r1, #2
 8000cae:	4831      	ldr	r0, [pc, #196]	; (8000d74 <EscribePass+0xd8>)
 8000cb0:	f001 fe3e 	bl	8002930 <HAL_GPIO_ReadPin>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d109      	bne.n	8000cce <EscribePass+0x32>

		password[aux]='1';
 8000cba:	4b2f      	ldr	r3, [pc, #188]	; (8000d78 <EscribePass+0xdc>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a2f      	ldr	r2, [pc, #188]	; (8000d7c <EscribePass+0xe0>)
 8000cc0:	2131      	movs	r1, #49	; 0x31
 8000cc2:	54d1      	strb	r1, [r2, r3]
		aux++;
 8000cc4:	4b2c      	ldr	r3, [pc, #176]	; (8000d78 <EscribePass+0xdc>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	4a2b      	ldr	r2, [pc, #172]	; (8000d78 <EscribePass+0xdc>)
 8000ccc:	6013      	str	r3, [r2, #0]

	}
	if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2)==1){
 8000cce:	2104      	movs	r1, #4
 8000cd0:	4828      	ldr	r0, [pc, #160]	; (8000d74 <EscribePass+0xd8>)
 8000cd2:	f001 fe2d 	bl	8002930 <HAL_GPIO_ReadPin>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d109      	bne.n	8000cf0 <EscribePass+0x54>

		password[aux]='2';
 8000cdc:	4b26      	ldr	r3, [pc, #152]	; (8000d78 <EscribePass+0xdc>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a26      	ldr	r2, [pc, #152]	; (8000d7c <EscribePass+0xe0>)
 8000ce2:	2132      	movs	r1, #50	; 0x32
 8000ce4:	54d1      	strb	r1, [r2, r3]
		aux++;
 8000ce6:	4b24      	ldr	r3, [pc, #144]	; (8000d78 <EscribePass+0xdc>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	3301      	adds	r3, #1
 8000cec:	4a22      	ldr	r2, [pc, #136]	; (8000d78 <EscribePass+0xdc>)
 8000cee:	6013      	str	r3, [r2, #0]

	}

	if (aux == 4){
 8000cf0:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <EscribePass+0xdc>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b04      	cmp	r3, #4
 8000cf6:	d13a      	bne.n	8000d6e <EscribePass+0xd2>
		aux = 0;
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <EscribePass+0xdc>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
		if(password[0]=='1' && password[1]=='2' && password[2]=='2' && password[3]=='1'){
 8000cfe:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <EscribePass+0xe0>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b31      	cmp	r3, #49	; 0x31
 8000d04:	d123      	bne.n	8000d4e <EscribePass+0xb2>
 8000d06:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <EscribePass+0xe0>)
 8000d08:	785b      	ldrb	r3, [r3, #1]
 8000d0a:	2b32      	cmp	r3, #50	; 0x32
 8000d0c:	d11f      	bne.n	8000d4e <EscribePass+0xb2>
 8000d0e:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <EscribePass+0xe0>)
 8000d10:	789b      	ldrb	r3, [r3, #2]
 8000d12:	2b32      	cmp	r3, #50	; 0x32
 8000d14:	d11b      	bne.n	8000d4e <EscribePass+0xb2>
 8000d16:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <EscribePass+0xe0>)
 8000d18:	78db      	ldrb	r3, [r3, #3]
 8000d1a:	2b31      	cmp	r3, #49	; 0x31
 8000d1c:	d117      	bne.n	8000d4e <EscribePass+0xb2>
			if (acceso == 1)
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <EscribePass+0xe4>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d103      	bne.n	8000d2e <EscribePass+0x92>
				acceso = 0;
 8000d26:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <EscribePass+0xe4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	e002      	b.n	8000d34 <EscribePass+0x98>
			else
				acceso = 1;
 8000d2e:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <EscribePass+0xe4>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	601a      	str	r2, [r3, #0]
			ALARMA = 0;
 8000d34:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <EscribePass+0xe8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
			EscribirPass = 0;
 8000d3a:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <EscribePass+0xec>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d46:	480a      	ldr	r0, [pc, #40]	; (8000d70 <EscribePass+0xd4>)
 8000d48:	f001 fe0a 	bl	8002960 <HAL_GPIO_WritePin>
			return;
 8000d4c:	e00f      	b.n	8000d6e <EscribePass+0xd2>
		}
		else{
			acceso = 0;
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <EscribePass+0xe4>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
			ALARMA = 1;
 8000d54:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <EscribePass+0xe8>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	601a      	str	r2, [r3, #0]
			EscribirPass = 0;
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <EscribePass+0xec>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,0);
 8000d60:	2200      	movs	r2, #0
 8000d62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d66:	4802      	ldr	r0, [pc, #8]	; (8000d70 <EscribePass+0xd4>)
 8000d68:	f001 fdfa 	bl	8002960 <HAL_GPIO_WritePin>
		    return;
 8000d6c:	bf00      	nop
		}
	}
}
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40020c00 	.word	0x40020c00
 8000d74:	40020000 	.word	0x40020000
 8000d78:	20000030 	.word	0x20000030
 8000d7c:	20000048 	.word	0x20000048
 8000d80:	20000000 	.word	0x20000000
 8000d84:	2000002c 	.word	0x2000002c
 8000d88:	20000034 	.word	0x20000034

08000d8c <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin==GPIO_PIN_0 ){
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d102      	bne.n	8000da2 <HAL_GPIO_EXTI_Callback+0x16>
		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
		//EscribePass();
		EscribirPass = 1;
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x24>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	601a      	str	r2, [r3, #0]
	}

}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	20000034 	.word	0x20000034

08000db4 <delay>:

///////////////////////////////   ULTRASONIDOS  ///////////////////////////////////
void delay (uint16_t time)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <delay+0x30>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 8000dc6:	bf00      	nop
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <delay+0x30>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dce:	88fb      	ldrh	r3, [r7, #6]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d3f9      	bcc.n	8000dc8 <delay+0x14>
}
 8000dd4:	bf00      	nop
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000128 	.word	0x20000128

08000de8 <HAL_TIM_IC_CaptureCallback>:
#define TRIG_PORT GPIOE



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	7f1b      	ldrb	r3, [r3, #28]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	f040 8083 	bne.w	8000f00 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000dfa:	4b51      	ldr	r3, [pc, #324]	; (8000f40 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d11a      	bne.n	8000e38 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000e02:	2100      	movs	r1, #0
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f002 feb5 	bl	8003b74 <HAL_TIM_ReadCapturedValue>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4a4d      	ldr	r2, [pc, #308]	; (8000f44 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000e0e:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000e10:	4b4b      	ldr	r3, [pc, #300]	; (8000f40 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	6a1a      	ldr	r2, [r3, #32]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f022 020a 	bic.w	r2, r2, #10
 8000e24:	621a      	str	r2, [r3, #32]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	6a1a      	ldr	r2, [r3, #32]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f042 0202 	orr.w	r2, r2, #2
 8000e34:	621a      	str	r2, [r3, #32]
 8000e36:	e063      	b.n	8000f00 <HAL_TIM_IC_CaptureCallback+0x118>
		}

		else if (Is_First_Captured==1)   // if the first is already captured
 8000e38:	4b41      	ldr	r3, [pc, #260]	; (8000f40 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d15f      	bne.n	8000f00 <HAL_TIM_IC_CaptureCallback+0x118>
		{
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000e40:	2100      	movs	r1, #0
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f002 fe96 	bl	8003b74 <HAL_TIM_ReadCapturedValue>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	4a3f      	ldr	r2, [pc, #252]	; (8000f48 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000e4c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2200      	movs	r2, #0
 8000e54:	625a      	str	r2, [r3, #36]	; 0x24

			if (IC_Val2 > IC_Val1)
 8000e56:	4b3c      	ldr	r3, [pc, #240]	; (8000f48 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	4b3a      	ldr	r3, [pc, #232]	; (8000f44 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d907      	bls.n	8000e72 <HAL_TIM_IC_CaptureCallback+0x8a>
			{
				Difference = IC_Val2-IC_Val1;
 8000e62:	4b39      	ldr	r3, [pc, #228]	; (8000f48 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	4b37      	ldr	r3, [pc, #220]	; (8000f44 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	4a37      	ldr	r2, [pc, #220]	; (8000f4c <HAL_TIM_IC_CaptureCallback+0x164>)
 8000e6e:	6013      	str	r3, [r2, #0]
 8000e70:	e00f      	b.n	8000e92 <HAL_TIM_IC_CaptureCallback+0xaa>
			}

			else if (IC_Val1 > IC_Val2)
 8000e72:	4b34      	ldr	r3, [pc, #208]	; (8000f44 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	4b34      	ldr	r3, [pc, #208]	; (8000f48 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d909      	bls.n	8000e92 <HAL_TIM_IC_CaptureCallback+0xaa>
			{
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000e7e:	4b32      	ldr	r3, [pc, #200]	; (8000f48 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	4b30      	ldr	r3, [pc, #192]	; (8000f44 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000e8c:	33ff      	adds	r3, #255	; 0xff
 8000e8e:	4a2f      	ldr	r2, [pc, #188]	; (8000f4c <HAL_TIM_IC_CaptureCallback+0x164>)
 8000e90:	6013      	str	r3, [r2, #0]
			}

			Distance = Difference * .034/2;
 8000e92:	4b2e      	ldr	r3, [pc, #184]	; (8000f4c <HAL_TIM_IC_CaptureCallback+0x164>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fad8 	bl	800044c <__aeabi_ui2d>
 8000e9c:	a326      	add	r3, pc, #152	; (adr r3, 8000f38 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea2:	f7ff fb4d 	bl	8000540 <__aeabi_dmul>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	4610      	mov	r0, r2
 8000eac:	4619      	mov	r1, r3
 8000eae:	f04f 0200 	mov.w	r2, #0
 8000eb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eb6:	f7ff fc6d 	bl	8000794 <__aeabi_ddiv>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4610      	mov	r0, r2
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f7ff fd4f 	bl	8000964 <__aeabi_d2uiz>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000ecc:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000ece:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]

			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	6a1a      	ldr	r2, [r3, #32]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f022 020a 	bic.w	r2, r2, #10
 8000ee2:	621a      	str	r2, [r3, #32]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	6a12      	ldr	r2, [r2, #32]
 8000eee:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000ef0:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	68da      	ldr	r2, [r3, #12]
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f022 0202 	bic.w	r2, r2, #2
 8000efe:	60da      	str	r2, [r3, #12]

		}

	}
	if (acceso != 1){
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d013      	beq.n	8000f30 <HAL_TIM_IC_CaptureCallback+0x148>
		if (Distance>5){ //señal de alarma
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b05      	cmp	r3, #5
 8000f0e:	d909      	bls.n	8000f24 <HAL_TIM_IC_CaptureCallback+0x13c>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,1);
 8000f10:	2201      	movs	r2, #1
 8000f12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f16:	4811      	ldr	r0, [pc, #68]	; (8000f5c <HAL_TIM_IC_CaptureCallback+0x174>)
 8000f18:	f001 fd22 	bl	8002960 <HAL_GPIO_WritePin>
			ALARMA = 1;
 8000f1c:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,0);


	}
}
}
 8000f22:	e005      	b.n	8000f30 <HAL_TIM_IC_CaptureCallback+0x148>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,0);
 8000f24:	2200      	movs	r2, #0
 8000f26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f2a:	480c      	ldr	r0, [pc, #48]	; (8000f5c <HAL_TIM_IC_CaptureCallback+0x174>)
 8000f2c:	f001 fd18 	bl	8002960 <HAL_GPIO_WritePin>
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	b020c49c 	.word	0xb020c49c
 8000f3c:	3fa16872 	.word	0x3fa16872
 8000f40:	20000044 	.word	0x20000044
 8000f44:	20000038 	.word	0x20000038
 8000f48:	2000003c 	.word	0x2000003c
 8000f4c:	20000040 	.word	0x20000040
 8000f50:	20000045 	.word	0x20000045
 8000f54:	20000128 	.word	0x20000128
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	40020c00 	.word	0x40020c00
 8000f60:	2000002c 	.word	0x2000002c

08000f64 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6e:	480b      	ldr	r0, [pc, #44]	; (8000f9c <HCSR04_Read+0x38>)
 8000f70:	f001 fcf6 	bl	8002960 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000f74:	200a      	movs	r0, #10
 8000f76:	f7ff ff1d 	bl	8000db4 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f80:	4806      	ldr	r0, [pc, #24]	; (8000f9c <HCSR04_Read+0x38>)
 8000f82:	f001 fced 	bl	8002960 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HCSR04_Read+0x3c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	68da      	ldr	r2, [r3, #12]
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <HCSR04_Read+0x3c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f042 0202 	orr.w	r2, r2, #2
 8000f94:	60da      	str	r2, [r3, #12]
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	20000128 	.word	0x20000128

08000fa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa8:	f000 fd60 	bl	8001a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fac:	f000 f87e 	bl	80010ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb0:	f000 fa64 	bl	800147c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000fb4:	f000 f958 	bl	8001268 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000fb8:	f000 f928 	bl	800120c <MX_I2C1_Init>
  MX_ADC1_Init();
 8000fbc:	f000 f8d4 	bl	8001168 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000fc0:	f000 f9a8 	bl	8001314 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fc4:	f000 fa00 	bl	80013c8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim1,TIM_CHANNEL_1);//empezamos en el modo de interrupcion
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4830      	ldr	r0, [pc, #192]	; (800108c <main+0xe8>)
 8000fcc:	f002 fb00 	bl	80035d0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	482f      	ldr	r0, [pc, #188]	; (8001090 <main+0xec>)
 8000fd4:	f002 fa92 	bl	80034fc <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 8000fd8:	482e      	ldr	r0, [pc, #184]	; (8001094 <main+0xf0>)
 8000fda:	f000 fe21 	bl	8001c20 <HAL_ADC_Start>

	       if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK){
 8000fde:	2164      	movs	r1, #100	; 0x64
 8000fe0:	482c      	ldr	r0, [pc, #176]	; (8001094 <main+0xf0>)
 8000fe2:	f000 ff16 	bl	8001e12 <HAL_ADC_PollForConversion>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d10c      	bne.n	8001006 <main+0x62>
	  			  adcValue = HAL_ADC_GetValue(&hadc1); //valor leído
 8000fec:	4829      	ldr	r0, [pc, #164]	; (8001094 <main+0xf0>)
 8000fee:	f000 ff94 	bl	8001f1a <HAL_ADC_GetValue>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4a28      	ldr	r2, [pc, #160]	; (8001098 <main+0xf4>)
 8000ff6:	6013      	str	r3, [r2, #0]
	  			  if (adcValue < 25)
 8000ff8:	4b27      	ldr	r3, [pc, #156]	; (8001098 <main+0xf4>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b18      	cmp	r3, #24
 8000ffe:	d802      	bhi.n	8001006 <main+0x62>
	  				  ALARMA = 1;
 8001000:	4b26      	ldr	r3, [pc, #152]	; (800109c <main+0xf8>)
 8001002:	2201      	movs	r2, #1
 8001004:	601a      	str	r2, [r3, #0]
	       }
	  		  HAL_ADC_Stop(&hadc1);
 8001006:	4823      	ldr	r0, [pc, #140]	; (8001094 <main+0xf0>)
 8001008:	f000 fed0 	bl	8001dac <HAL_ADC_Stop>

  	  HCSR04_Read();//LECTURA DEL ULTRASONIDOS
 800100c:	f7ff ffaa 	bl	8000f64 <HCSR04_Read>

 	  HAL_Delay(200);
 8001010:	20c8      	movs	r0, #200	; 0xc8
 8001012:	f000 fd9d 	bl	8001b50 <HAL_Delay>
 	 if (EscribirPass == 1){
 8001016:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <main+0xfc>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d107      	bne.n	800102e <main+0x8a>
 		 HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800101e:	2006      	movs	r0, #6
 8001020:	f001 facf 	bl	80025c2 <HAL_NVIC_DisableIRQ>
 		 EscribePass();
 8001024:	f7ff fe3a 	bl	8000c9c <EscribePass>
 		 HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001028:	2006      	movs	r0, #6
 800102a:	f001 fabc 	bl	80025a6 <HAL_NVIC_EnableIRQ>


 	 }
 	 if (ALARMA == 1){
 800102e:	4b1b      	ldr	r3, [pc, #108]	; (800109c <main+0xf8>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d10d      	bne.n	8001052 <main+0xae>
 		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,1);
 8001036:	2201      	movs	r2, #1
 8001038:	2140      	movs	r1, #64	; 0x40
 800103a:	481a      	ldr	r0, [pc, #104]	; (80010a4 <main+0x100>)
 800103c:	f001 fc90 	bl	8002960 <HAL_GPIO_WritePin>
 		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,0);
 8001040:	2200      	movs	r2, #0
 8001042:	2180      	movs	r1, #128	; 0x80
 8001044:	4817      	ldr	r0, [pc, #92]	; (80010a4 <main+0x100>)
 8001046:	f001 fc8b 	bl	8002960 <HAL_GPIO_WritePin>
 		 htim3.Instance->CCR1 = 255;
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <main+0xec>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	22ff      	movs	r2, #255	; 0xff
 8001050:	635a      	str	r2, [r3, #52]	; 0x34
 		 //BuzAlarm();
 	  }
 	 if (acceso == 1) {
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <main+0x104>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d111      	bne.n	800107e <main+0xda>
 		 htim3.Instance->CCR1 = 0;
 800105a:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <main+0xec>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2200      	movs	r2, #0
 8001060:	635a      	str	r2, [r3, #52]	; 0x34
 		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,0);
 8001062:	2200      	movs	r2, #0
 8001064:	2140      	movs	r1, #64	; 0x40
 8001066:	480f      	ldr	r0, [pc, #60]	; (80010a4 <main+0x100>)
 8001068:	f001 fc7a 	bl	8002960 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,1);
 800106c:	2201      	movs	r2, #1
 800106e:	2180      	movs	r1, #128	; 0x80
 8001070:	480c      	ldr	r0, [pc, #48]	; (80010a4 <main+0x100>)
 8001072:	f001 fc75 	bl	8002960 <HAL_GPIO_WritePin>

 		 ALARMA = 0;
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <main+0xf8>)
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	e7ac      	b.n	8000fd8 <main+0x34>
 	  }
 	 else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7,0);
 800107e:	2200      	movs	r2, #0
 8001080:	2180      	movs	r1, #128	; 0x80
 8001082:	4808      	ldr	r0, [pc, #32]	; (80010a4 <main+0x100>)
 8001084:	f001 fc6c 	bl	8002960 <HAL_GPIO_WritePin>
	  HAL_ADC_Start(&hadc1);
 8001088:	e7a6      	b.n	8000fd8 <main+0x34>
 800108a:	bf00      	nop
 800108c:	20000128 	.word	0x20000128
 8001090:	200000a0 	.word	0x200000a0
 8001094:	200000e0 	.word	0x200000e0
 8001098:	200001a8 	.word	0x200001a8
 800109c:	2000002c 	.word	0x2000002c
 80010a0:	20000034 	.word	0x20000034
 80010a4:	40020800 	.word	0x40020800
 80010a8:	20000000 	.word	0x20000000

080010ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b094      	sub	sp, #80	; 0x50
 80010b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b2:	f107 0320 	add.w	r3, r7, #32
 80010b6:	2230      	movs	r2, #48	; 0x30
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f003 fa1a 	bl	80044f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	4b22      	ldr	r3, [pc, #136]	; (8001160 <SystemClock_Config+0xb4>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	4a21      	ldr	r2, [pc, #132]	; (8001160 <SystemClock_Config+0xb4>)
 80010da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010de:	6413      	str	r3, [r2, #64]	; 0x40
 80010e0:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <SystemClock_Config+0xb4>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ec:	2300      	movs	r3, #0
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <SystemClock_Config+0xb8>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a1b      	ldr	r2, [pc, #108]	; (8001164 <SystemClock_Config+0xb8>)
 80010f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010fa:	6013      	str	r3, [r2, #0]
 80010fc:	4b19      	ldr	r3, [pc, #100]	; (8001164 <SystemClock_Config+0xb8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001108:	2302      	movs	r3, #2
 800110a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800110c:	2301      	movs	r3, #1
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001110:	2310      	movs	r3, #16
 8001112:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001114:	2300      	movs	r3, #0
 8001116:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001118:	f107 0320 	add.w	r3, r7, #32
 800111c:	4618      	mov	r0, r3
 800111e:	f001 fd95 	bl	8002c4c <HAL_RCC_OscConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001128:	f000 fa80 	bl	800162c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112c:	230f      	movs	r3, #15
 800112e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f001 fff0 	bl	800312c <HAL_RCC_ClockConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001152:	f000 fa6b 	bl	800162c <Error_Handler>
  }
}
 8001156:	bf00      	nop
 8001158:	3750      	adds	r7, #80	; 0x50
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800
 8001164:	40007000 	.word	0x40007000

08001168 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800116e:	463b      	mov	r3, r7
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800117a:	4b21      	ldr	r3, [pc, #132]	; (8001200 <MX_ADC1_Init+0x98>)
 800117c:	4a21      	ldr	r2, [pc, #132]	; (8001204 <MX_ADC1_Init+0x9c>)
 800117e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001180:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <MX_ADC1_Init+0x98>)
 8001182:	2200      	movs	r2, #0
 8001184:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001186:	4b1e      	ldr	r3, [pc, #120]	; (8001200 <MX_ADC1_Init+0x98>)
 8001188:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800118c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800118e:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <MX_ADC1_Init+0x98>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <MX_ADC1_Init+0x98>)
 8001196:	2200      	movs	r2, #0
 8001198:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800119a:	4b19      	ldr	r3, [pc, #100]	; (8001200 <MX_ADC1_Init+0x98>)
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a2:	4b17      	ldr	r3, [pc, #92]	; (8001200 <MX_ADC1_Init+0x98>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a8:	4b15      	ldr	r3, [pc, #84]	; (8001200 <MX_ADC1_Init+0x98>)
 80011aa:	4a17      	ldr	r2, [pc, #92]	; (8001208 <MX_ADC1_Init+0xa0>)
 80011ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MX_ADC1_Init+0x98>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <MX_ADC1_Init+0x98>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_ADC1_Init+0x98>)
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_ADC1_Init+0x98>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011c8:	480d      	ldr	r0, [pc, #52]	; (8001200 <MX_ADC1_Init+0x98>)
 80011ca:	f000 fce5 	bl	8001b98 <HAL_ADC_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011d4:	f000 fa2a 	bl	800162c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80011d8:	230b      	movs	r3, #11
 80011da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011dc:	2301      	movs	r3, #1
 80011de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e4:	463b      	mov	r3, r7
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_ADC1_Init+0x98>)
 80011ea:	f000 fea3 	bl	8001f34 <HAL_ADC_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011f4:	f000 fa1a 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200000e0 	.word	0x200000e0
 8001204:	40012000 	.word	0x40012000
 8001208:	0f000001 	.word	0x0f000001

0800120c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <MX_I2C1_Init+0x50>)
 8001212:	4a13      	ldr	r2, [pc, #76]	; (8001260 <MX_I2C1_Init+0x54>)
 8001214:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <MX_I2C1_Init+0x50>)
 8001218:	4a12      	ldr	r2, [pc, #72]	; (8001264 <MX_I2C1_Init+0x58>)
 800121a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <MX_I2C1_Init+0x50>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <MX_I2C1_Init+0x50>)
 8001224:	2200      	movs	r2, #0
 8001226:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <MX_I2C1_Init+0x50>)
 800122a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800122e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <MX_I2C1_Init+0x50>)
 8001232:	2200      	movs	r2, #0
 8001234:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <MX_I2C1_Init+0x50>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800123c:	4b07      	ldr	r3, [pc, #28]	; (800125c <MX_I2C1_Init+0x50>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <MX_I2C1_Init+0x50>)
 8001244:	2200      	movs	r2, #0
 8001246:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001248:	4804      	ldr	r0, [pc, #16]	; (800125c <MX_I2C1_Init+0x50>)
 800124a:	f001 fbbb 	bl	80029c4 <HAL_I2C_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001254:	f000 f9ea 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	2000004c 	.word	0x2000004c
 8001260:	40005400 	.word	0x40005400
 8001264:	000186a0 	.word	0x000186a0

08001268 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126e:	f107 0310 	add.w	r3, r7, #16
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001278:	463b      	mov	r3, r7
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001284:	4b21      	ldr	r3, [pc, #132]	; (800130c <MX_TIM1_Init+0xa4>)
 8001286:	4a22      	ldr	r2, [pc, #136]	; (8001310 <MX_TIM1_Init+0xa8>)
 8001288:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800128a:	4b20      	ldr	r3, [pc, #128]	; (800130c <MX_TIM1_Init+0xa4>)
 800128c:	2247      	movs	r2, #71	; 0x47
 800128e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001290:	4b1e      	ldr	r3, [pc, #120]	; (800130c <MX_TIM1_Init+0xa4>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001296:	4b1d      	ldr	r3, [pc, #116]	; (800130c <MX_TIM1_Init+0xa4>)
 8001298:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800129c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129e:	4b1b      	ldr	r3, [pc, #108]	; (800130c <MX_TIM1_Init+0xa4>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <MX_TIM1_Init+0xa4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <MX_TIM1_Init+0xa4>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80012b0:	4816      	ldr	r0, [pc, #88]	; (800130c <MX_TIM1_Init+0xa4>)
 80012b2:	f002 f961 	bl	8003578 <HAL_TIM_IC_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80012bc:	f000 f9b6 	bl	800162c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c0:	2300      	movs	r3, #0
 80012c2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012c8:	f107 0310 	add.w	r3, r7, #16
 80012cc:	4619      	mov	r1, r3
 80012ce:	480f      	ldr	r0, [pc, #60]	; (800130c <MX_TIM1_Init+0xa4>)
 80012d0:	f003 f85c 	bl	800438c <HAL_TIMEx_MasterConfigSynchronization>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80012da:	f000 f9a7 	bl	800162c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012de:	2300      	movs	r3, #0
 80012e0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012e2:	2301      	movs	r3, #1
 80012e4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012ee:	463b      	mov	r3, r7
 80012f0:	2200      	movs	r2, #0
 80012f2:	4619      	mov	r1, r3
 80012f4:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_TIM1_Init+0xa4>)
 80012f6:	f002 fadb 	bl	80038b0 <HAL_TIM_IC_ConfigChannel>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001300:	f000 f994 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000128 	.word	0x20000128
 8001310:	40010000 	.word	0x40010000

08001314 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131a:	f107 0320 	add.w	r3, r7, #32
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]
 8001332:	615a      	str	r2, [r3, #20]
 8001334:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001336:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <MX_TIM2_Init+0xb0>)
 8001338:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800133c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 900-1;
 800133e:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <MX_TIM2_Init+0xb0>)
 8001340:	f240 3283 	movw	r2, #899	; 0x383
 8001344:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001346:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <MX_TIM2_Init+0xb0>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800134c:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <MX_TIM2_Init+0xb0>)
 800134e:	f04f 32ff 	mov.w	r2, #4294967295
 8001352:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <MX_TIM2_Init+0xb0>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <MX_TIM2_Init+0xb0>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001360:	4818      	ldr	r0, [pc, #96]	; (80013c4 <MX_TIM2_Init+0xb0>)
 8001362:	f002 f89f 	bl	80034a4 <HAL_TIM_PWM_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800136c:	f000 f95e 	bl	800162c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001370:	2300      	movs	r3, #0
 8001372:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001378:	f107 0320 	add.w	r3, r7, #32
 800137c:	4619      	mov	r1, r3
 800137e:	4811      	ldr	r0, [pc, #68]	; (80013c4 <MX_TIM2_Init+0xb0>)
 8001380:	f003 f804 	bl	800438c <HAL_TIMEx_MasterConfigSynchronization>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800138a:	f000 f94f 	bl	800162c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800138e:	2360      	movs	r3, #96	; 0x60
 8001390:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	2200      	movs	r2, #0
 80013a2:	4619      	mov	r1, r3
 80013a4:	4807      	ldr	r0, [pc, #28]	; (80013c4 <MX_TIM2_Init+0xb0>)
 80013a6:	f002 fb1f 	bl	80039e8 <HAL_TIM_PWM_ConfigChannel>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80013b0:	f000 f93c 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013b4:	4803      	ldr	r0, [pc, #12]	; (80013c4 <MX_TIM2_Init+0xb0>)
 80013b6:	f000 fa7b 	bl	80018b0 <HAL_TIM_MspPostInit>

}
 80013ba:	bf00      	nop
 80013bc:	3728      	adds	r7, #40	; 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000168 	.word	0x20000168

080013c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ce:	f107 0320 	add.w	r3, r7, #32
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	611a      	str	r2, [r3, #16]
 80013e6:	615a      	str	r2, [r3, #20]
 80013e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013ea:	4b22      	ldr	r3, [pc, #136]	; (8001474 <MX_TIM3_Init+0xac>)
 80013ec:	4a22      	ldr	r2, [pc, #136]	; (8001478 <MX_TIM3_Init+0xb0>)
 80013ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013f0:	4b20      	ldr	r3, [pc, #128]	; (8001474 <MX_TIM3_Init+0xac>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f6:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <MX_TIM3_Init+0xac>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013fc:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <MX_TIM3_Init+0xac>)
 80013fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001402:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001404:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <MX_TIM3_Init+0xac>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140a:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <MX_TIM3_Init+0xac>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001410:	4818      	ldr	r0, [pc, #96]	; (8001474 <MX_TIM3_Init+0xac>)
 8001412:	f002 f847 	bl	80034a4 <HAL_TIM_PWM_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800141c:	f000 f906 	bl	800162c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001420:	2300      	movs	r3, #0
 8001422:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001428:	f107 0320 	add.w	r3, r7, #32
 800142c:	4619      	mov	r1, r3
 800142e:	4811      	ldr	r0, [pc, #68]	; (8001474 <MX_TIM3_Init+0xac>)
 8001430:	f002 ffac 	bl	800438c <HAL_TIMEx_MasterConfigSynchronization>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800143a:	f000 f8f7 	bl	800162c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800143e:	2360      	movs	r3, #96	; 0x60
 8001440:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	2200      	movs	r2, #0
 8001452:	4619      	mov	r1, r3
 8001454:	4807      	ldr	r0, [pc, #28]	; (8001474 <MX_TIM3_Init+0xac>)
 8001456:	f002 fac7 	bl	80039e8 <HAL_TIM_PWM_ConfigChannel>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001460:	f000 f8e4 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001464:	4803      	ldr	r0, [pc, #12]	; (8001474 <MX_TIM3_Init+0xac>)
 8001466:	f000 fa23 	bl	80018b0 <HAL_TIM_MspPostInit>

}
 800146a:	bf00      	nop
 800146c:	3728      	adds	r7, #40	; 0x28
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200000a0 	.word	0x200000a0
 8001478:	40000400 	.word	0x40000400

0800147c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08c      	sub	sp, #48	; 0x30
 8001480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
 8001490:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	61bb      	str	r3, [r7, #24]
 8001496:	4b5f      	ldr	r3, [pc, #380]	; (8001614 <MX_GPIO_Init+0x198>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a5e      	ldr	r2, [pc, #376]	; (8001614 <MX_GPIO_Init+0x198>)
 800149c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b5c      	ldr	r3, [pc, #368]	; (8001614 <MX_GPIO_Init+0x198>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014aa:	61bb      	str	r3, [r7, #24]
 80014ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	4b58      	ldr	r3, [pc, #352]	; (8001614 <MX_GPIO_Init+0x198>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a57      	ldr	r2, [pc, #348]	; (8001614 <MX_GPIO_Init+0x198>)
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b55      	ldr	r3, [pc, #340]	; (8001614 <MX_GPIO_Init+0x198>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	4b51      	ldr	r3, [pc, #324]	; (8001614 <MX_GPIO_Init+0x198>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a50      	ldr	r2, [pc, #320]	; (8001614 <MX_GPIO_Init+0x198>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b4e      	ldr	r3, [pc, #312]	; (8001614 <MX_GPIO_Init+0x198>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b4a      	ldr	r3, [pc, #296]	; (8001614 <MX_GPIO_Init+0x198>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a49      	ldr	r2, [pc, #292]	; (8001614 <MX_GPIO_Init+0x198>)
 80014f0:	f043 0310 	orr.w	r3, r3, #16
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b47      	ldr	r3, [pc, #284]	; (8001614 <MX_GPIO_Init+0x198>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0310 	and.w	r3, r3, #16
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	4b43      	ldr	r3, [pc, #268]	; (8001614 <MX_GPIO_Init+0x198>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a42      	ldr	r2, [pc, #264]	; (8001614 <MX_GPIO_Init+0x198>)
 800150c:	f043 0308 	orr.w	r3, r3, #8
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b40      	ldr	r3, [pc, #256]	; (8001614 <MX_GPIO_Init+0x198>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0308 	and.w	r3, r3, #8
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	4b3c      	ldr	r3, [pc, #240]	; (8001614 <MX_GPIO_Init+0x198>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a3b      	ldr	r2, [pc, #236]	; (8001614 <MX_GPIO_Init+0x198>)
 8001528:	f043 0302 	orr.w	r3, r3, #2
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b39      	ldr	r3, [pc, #228]	; (8001614 <MX_GPIO_Init+0x198>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trig_Pin_GPIO_Port, Trig_Pin_Pin, GPIO_PIN_RESET);
 800153a:	2200      	movs	r2, #0
 800153c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001540:	4835      	ldr	r0, [pc, #212]	; (8001618 <MX_GPIO_Init+0x19c>)
 8001542:	f001 fa0d 	bl	8002960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Led_Rojo_Pin|Led_Blanco_Pin|GPIO_PIN_14|GPIO_PIN_15
 8001546:	2200      	movs	r2, #0
 8001548:	f24f 01f0 	movw	r1, #61680	; 0xf0f0
 800154c:	4833      	ldr	r0, [pc, #204]	; (800161c <MX_GPIO_Init+0x1a0>)
 800154e:	f001 fa07 	bl	8002960 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	21c0      	movs	r1, #192	; 0xc0
 8001556:	4832      	ldr	r0, [pc, #200]	; (8001620 <MX_GPIO_Init+0x1a4>)
 8001558:	f001 fa02 	bl	8002960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800155c:	2301      	movs	r3, #1
 800155e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001560:	4b30      	ldr	r3, [pc, #192]	; (8001624 <MX_GPIO_Init+0x1a8>)
 8001562:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	4619      	mov	r1, r3
 800156e:	482e      	ldr	r0, [pc, #184]	; (8001628 <MX_GPIO_Init+0x1ac>)
 8001570:	f001 f842 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001574:	2306      	movs	r3, #6
 8001576:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001578:	2300      	movs	r3, #0
 800157a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001580:	f107 031c 	add.w	r3, r7, #28
 8001584:	4619      	mov	r1, r3
 8001586:	4828      	ldr	r0, [pc, #160]	; (8001628 <MX_GPIO_Init+0x1ac>)
 8001588:	f001 f836 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Trig_Pin_Pin */
  GPIO_InitStruct.Pin = Trig_Pin_Pin;
 800158c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001590:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001592:	2301      	movs	r3, #1
 8001594:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Trig_Pin_GPIO_Port, &GPIO_InitStruct);
 800159e:	f107 031c 	add.w	r3, r7, #28
 80015a2:	4619      	mov	r1, r3
 80015a4:	481c      	ldr	r0, [pc, #112]	; (8001618 <MX_GPIO_Init+0x19c>)
 80015a6:	f001 f827 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_Rojo_Pin Led_Blanco_Pin PD14 PD15
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = Led_Rojo_Pin|Led_Blanco_Pin|GPIO_PIN_14|GPIO_PIN_15
 80015aa:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
 80015ae:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	4619      	mov	r1, r3
 80015c2:	4816      	ldr	r0, [pc, #88]	; (800161c <MX_GPIO_Init+0x1a0>)
 80015c4:	f001 f818 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015c8:	23c0      	movs	r3, #192	; 0xc0
 80015ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015cc:	2301      	movs	r3, #1
 80015ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	4619      	mov	r1, r3
 80015de:	4810      	ldr	r0, [pc, #64]	; (8001620 <MX_GPIO_Init+0x1a4>)
 80015e0:	f001 f80a 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80015e4:	230f      	movs	r3, #15
 80015e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e8:	2300      	movs	r3, #0
 80015ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	4619      	mov	r1, r3
 80015f6:	4809      	ldr	r0, [pc, #36]	; (800161c <MX_GPIO_Init+0x1a0>)
 80015f8:	f000 fffe 	bl	80025f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2100      	movs	r1, #0
 8001600:	2006      	movs	r0, #6
 8001602:	f000 ffb4 	bl	800256e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001606:	2006      	movs	r0, #6
 8001608:	f000 ffcd 	bl	80025a6 <HAL_NVIC_EnableIRQ>

}
 800160c:	bf00      	nop
 800160e:	3730      	adds	r7, #48	; 0x30
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40023800 	.word	0x40023800
 8001618:	40021000 	.word	0x40021000
 800161c:	40020c00 	.word	0x40020c00
 8001620:	40020800 	.word	0x40020800
 8001624:	10110000 	.word	0x10110000
 8001628:	40020000 	.word	0x40020000

0800162c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <HAL_MspInit+0x4c>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	4a0f      	ldr	r2, [pc, #60]	; (8001688 <HAL_MspInit+0x4c>)
 800164c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001650:	6453      	str	r3, [r2, #68]	; 0x44
 8001652:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <HAL_MspInit+0x4c>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	603b      	str	r3, [r7, #0]
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_MspInit+0x4c>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a08      	ldr	r2, [pc, #32]	; (8001688 <HAL_MspInit+0x4c>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_MspInit+0x4c>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800

0800168c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a17      	ldr	r2, [pc, #92]	; (8001708 <HAL_ADC_MspInit+0x7c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d127      	bne.n	80016fe <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	4b16      	ldr	r3, [pc, #88]	; (800170c <HAL_ADC_MspInit+0x80>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	4a15      	ldr	r2, [pc, #84]	; (800170c <HAL_ADC_MspInit+0x80>)
 80016b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016bc:	6453      	str	r3, [r2, #68]	; 0x44
 80016be:	4b13      	ldr	r3, [pc, #76]	; (800170c <HAL_ADC_MspInit+0x80>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <HAL_ADC_MspInit+0x80>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a0e      	ldr	r2, [pc, #56]	; (800170c <HAL_ADC_MspInit+0x80>)
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <HAL_ADC_MspInit+0x80>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016e6:	2302      	movs	r3, #2
 80016e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ea:	2303      	movs	r3, #3
 80016ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	4805      	ldr	r0, [pc, #20]	; (8001710 <HAL_ADC_MspInit+0x84>)
 80016fa:	f000 ff7d 	bl	80025f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016fe:	bf00      	nop
 8001700:	3728      	adds	r7, #40	; 0x28
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40012000 	.word	0x40012000
 800170c:	40023800 	.word	0x40023800
 8001710:	40020800 	.word	0x40020800

08001714 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a19      	ldr	r2, [pc, #100]	; (8001798 <HAL_I2C_MspInit+0x84>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d12b      	bne.n	800178e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_I2C_MspInit+0x88>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a17      	ldr	r2, [pc, #92]	; (800179c <HAL_I2C_MspInit+0x88>)
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_I2C_MspInit+0x88>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001752:	23c0      	movs	r3, #192	; 0xc0
 8001754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001756:	2312      	movs	r3, #18
 8001758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800175a:	2301      	movs	r3, #1
 800175c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175e:	2303      	movs	r3, #3
 8001760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001762:	2304      	movs	r3, #4
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	4619      	mov	r1, r3
 800176c:	480c      	ldr	r0, [pc, #48]	; (80017a0 <HAL_I2C_MspInit+0x8c>)
 800176e:	f000 ff43 	bl	80025f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <HAL_I2C_MspInit+0x88>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	4a08      	ldr	r2, [pc, #32]	; (800179c <HAL_I2C_MspInit+0x88>)
 800177c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001780:	6413      	str	r3, [r2, #64]	; 0x40
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_I2C_MspInit+0x88>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800178e:	bf00      	nop
 8001790:	3728      	adds	r7, #40	; 0x28
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40005400 	.word	0x40005400
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020400 	.word	0x40020400

080017a4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a1d      	ldr	r2, [pc, #116]	; (8001838 <HAL_TIM_IC_MspInit+0x94>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d134      	bne.n	8001830 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	4b1c      	ldr	r3, [pc, #112]	; (800183c <HAL_TIM_IC_MspInit+0x98>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	4a1b      	ldr	r2, [pc, #108]	; (800183c <HAL_TIM_IC_MspInit+0x98>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6453      	str	r3, [r2, #68]	; 0x44
 80017d6:	4b19      	ldr	r3, [pc, #100]	; (800183c <HAL_TIM_IC_MspInit+0x98>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_TIM_IC_MspInit+0x98>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a14      	ldr	r2, [pc, #80]	; (800183c <HAL_TIM_IC_MspInit+0x98>)
 80017ec:	f043 0310 	orr.w	r3, r3, #16
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_TIM_IC_MspInit+0x98>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0310 	and.w	r3, r3, #16
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Echo_Pin_Pin;
 80017fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001810:	2301      	movs	r3, #1
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Echo_Pin_GPIO_Port, &GPIO_InitStruct);
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	4619      	mov	r1, r3
 800181a:	4809      	ldr	r0, [pc, #36]	; (8001840 <HAL_TIM_IC_MspInit+0x9c>)
 800181c:	f000 feec 	bl	80025f8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001820:	2200      	movs	r2, #0
 8001822:	2100      	movs	r1, #0
 8001824:	201b      	movs	r0, #27
 8001826:	f000 fea2 	bl	800256e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800182a:	201b      	movs	r0, #27
 800182c:	f000 febb 	bl	80025a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001830:	bf00      	nop
 8001832:	3728      	adds	r7, #40	; 0x28
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40010000 	.word	0x40010000
 800183c:	40023800 	.word	0x40023800
 8001840:	40021000 	.word	0x40021000

08001844 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001854:	d10e      	bne.n	8001874 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <HAL_TIM_PWM_MspInit+0x64>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <HAL_TIM_PWM_MspInit+0x64>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6413      	str	r3, [r2, #64]	; 0x40
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <HAL_TIM_PWM_MspInit+0x64>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001872:	e012      	b.n	800189a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a0c      	ldr	r2, [pc, #48]	; (80018ac <HAL_TIM_PWM_MspInit+0x68>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d10d      	bne.n	800189a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <HAL_TIM_PWM_MspInit+0x64>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	4a08      	ldr	r2, [pc, #32]	; (80018a8 <HAL_TIM_PWM_MspInit+0x64>)
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	6413      	str	r3, [r2, #64]	; 0x40
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_TIM_PWM_MspInit+0x64>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
}
 800189a:	bf00      	nop
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40000400 	.word	0x40000400

080018b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	; 0x28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018d0:	d11e      	bne.n	8001910 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	4b22      	ldr	r3, [pc, #136]	; (8001960 <HAL_TIM_MspPostInit+0xb0>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a21      	ldr	r2, [pc, #132]	; (8001960 <HAL_TIM_MspPostInit+0xb0>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b1f      	ldr	r3, [pc, #124]	; (8001960 <HAL_TIM_MspPostInit+0xb0>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018ee:	2320      	movs	r3, #32
 80018f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	2302      	movs	r3, #2
 80018f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fa:	2300      	movs	r3, #0
 80018fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018fe:	2301      	movs	r3, #1
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	4619      	mov	r1, r3
 8001908:	4816      	ldr	r0, [pc, #88]	; (8001964 <HAL_TIM_MspPostInit+0xb4>)
 800190a:	f000 fe75 	bl	80025f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800190e:	e022      	b.n	8001956 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a14      	ldr	r2, [pc, #80]	; (8001968 <HAL_TIM_MspPostInit+0xb8>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d11d      	bne.n	8001956 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <HAL_TIM_MspPostInit+0xb0>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a0f      	ldr	r2, [pc, #60]	; (8001960 <HAL_TIM_MspPostInit+0xb0>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <HAL_TIM_MspPostInit+0xb0>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001936:	2340      	movs	r3, #64	; 0x40
 8001938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	2300      	movs	r3, #0
 8001944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001946:	2302      	movs	r3, #2
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	4619      	mov	r1, r3
 8001950:	4804      	ldr	r0, [pc, #16]	; (8001964 <HAL_TIM_MspPostInit+0xb4>)
 8001952:	f000 fe51 	bl	80025f8 <HAL_GPIO_Init>
}
 8001956:	bf00      	nop
 8001958:	3728      	adds	r7, #40	; 0x28
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	40020000 	.word	0x40020000
 8001968:	40000400 	.word	0x40000400

0800196c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <HardFault_Handler+0x4>

08001980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <MemManage_Handler+0x4>

08001986 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <BusFault_Handler+0x4>

0800198c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <UsageFault_Handler+0x4>

08001992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c0:	f000 f8a6 	bl	8001b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80019cc:	2001      	movs	r0, #1
 80019ce:	f000 ffe1 	bl	8002994 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019dc:	4802      	ldr	r0, [pc, #8]	; (80019e8 <TIM1_CC_IRQHandler+0x10>)
 80019de:	f001 fe5f 	bl	80036a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000128 	.word	0x20000128

080019ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <SystemInit+0x28>)
 80019f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f6:	4a07      	ldr	r2, [pc, #28]	; (8001a14 <SystemInit+0x28>)
 80019f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <SystemInit+0x28>)
 8001a02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a06:	609a      	str	r2, [r3, #8]
#endif
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <Reset_Handler>:
 8001a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a50 <LoopFillZerobss+0x14>
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	e003      	b.n	8001a28 <LoopCopyDataInit>

08001a20 <CopyDataInit>:
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <LoopFillZerobss+0x18>)
 8001a22:	585b      	ldr	r3, [r3, r1]
 8001a24:	5043      	str	r3, [r0, r1]
 8001a26:	3104      	adds	r1, #4

08001a28 <LoopCopyDataInit>:
 8001a28:	480b      	ldr	r0, [pc, #44]	; (8001a58 <LoopFillZerobss+0x1c>)
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <LoopFillZerobss+0x20>)
 8001a2c:	1842      	adds	r2, r0, r1
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d3f6      	bcc.n	8001a20 <CopyDataInit>
 8001a32:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <LoopFillZerobss+0x24>)
 8001a34:	e002      	b.n	8001a3c <LoopFillZerobss>

08001a36 <FillZerobss>:
 8001a36:	2300      	movs	r3, #0
 8001a38:	f842 3b04 	str.w	r3, [r2], #4

08001a3c <LoopFillZerobss>:
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <LoopFillZerobss+0x28>)
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d3f9      	bcc.n	8001a36 <FillZerobss>
 8001a42:	f7ff ffd3 	bl	80019ec <SystemInit>
 8001a46:	f002 fd31 	bl	80044ac <__libc_init_array>
 8001a4a:	f7ff faab 	bl	8000fa4 <main>
 8001a4e:	4770      	bx	lr
 8001a50:	20020000 	.word	0x20020000
 8001a54:	08004544 	.word	0x08004544
 8001a58:	20000000 	.word	0x20000000
 8001a5c:	20000010 	.word	0x20000010
 8001a60:	20000010 	.word	0x20000010
 8001a64:	200001b0 	.word	0x200001b0

08001a68 <ADC_IRQHandler>:
 8001a68:	e7fe      	b.n	8001a68 <ADC_IRQHandler>
	...

08001a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <HAL_Init+0x40>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0d      	ldr	r2, [pc, #52]	; (8001aac <HAL_Init+0x40>)
 8001a76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_Init+0x40>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <HAL_Init+0x40>)
 8001a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <HAL_Init+0x40>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a07      	ldr	r2, [pc, #28]	; (8001aac <HAL_Init+0x40>)
 8001a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a94:	2003      	movs	r0, #3
 8001a96:	f000 fd5f 	bl	8002558 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f000 f808 	bl	8001ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa0:	f7ff fdcc 	bl	800163c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023c00 	.word	0x40023c00

08001ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_InitTick+0x54>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_InitTick+0x58>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 fd85 	bl	80025de <HAL_SYSTICK_Config>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e00e      	b.n	8001afc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b0f      	cmp	r3, #15
 8001ae2:	d80a      	bhi.n	8001afa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aec:	f000 fd3f 	bl	800256e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af0:	4a06      	ldr	r2, [pc, #24]	; (8001b0c <HAL_InitTick+0x5c>)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e000      	b.n	8001afc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000004 	.word	0x20000004
 8001b08:	2000000c 	.word	0x2000000c
 8001b0c:	20000008 	.word	0x20000008

08001b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_IncTick+0x20>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_IncTick+0x24>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4413      	add	r3, r2
 8001b20:	4a04      	ldr	r2, [pc, #16]	; (8001b34 <HAL_IncTick+0x24>)
 8001b22:	6013      	str	r3, [r2, #0]
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	2000000c 	.word	0x2000000c
 8001b34:	200001ac 	.word	0x200001ac

08001b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <HAL_GetTick+0x14>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	200001ac 	.word	0x200001ac

08001b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b58:	f7ff ffee 	bl	8001b38 <HAL_GetTick>
 8001b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b68:	d005      	beq.n	8001b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <HAL_Delay+0x44>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4413      	add	r3, r2
 8001b74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b76:	bf00      	nop
 8001b78:	f7ff ffde 	bl	8001b38 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d8f7      	bhi.n	8001b78 <HAL_Delay+0x28>
  {
  }
}
 8001b88:	bf00      	nop
 8001b8a:	bf00      	nop
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	2000000c 	.word	0x2000000c

08001b98 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e033      	b.n	8001c16 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d109      	bne.n	8001bca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff fd68 	bl	800168c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d118      	bne.n	8001c08 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bde:	f023 0302 	bic.w	r3, r3, #2
 8001be2:	f043 0202 	orr.w	r2, r3, #2
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 fac4 	bl	8002178 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f023 0303 	bic.w	r3, r3, #3
 8001bfe:	f043 0201 	orr.w	r2, r3, #1
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	641a      	str	r2, [r3, #64]	; 0x40
 8001c06:	e001      	b.n	8001c0c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d101      	bne.n	8001c3a <HAL_ADC_Start+0x1a>
 8001c36:	2302      	movs	r3, #2
 8001c38:	e0a5      	b.n	8001d86 <HAL_ADC_Start+0x166>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d018      	beq.n	8001c82 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0201 	orr.w	r2, r2, #1
 8001c5e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c60:	4b4c      	ldr	r3, [pc, #304]	; (8001d94 <HAL_ADC_Start+0x174>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a4c      	ldr	r2, [pc, #304]	; (8001d98 <HAL_ADC_Start+0x178>)
 8001c66:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6a:	0c9a      	lsrs	r2, r3, #18
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4413      	add	r3, r2
 8001c72:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c74:	e002      	b.n	8001c7c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f9      	bne.n	8001c76 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d179      	bne.n	8001d84 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c98:	f023 0301 	bic.w	r3, r3, #1
 8001c9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d007      	beq.n	8001cc2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cce:	d106      	bne.n	8001cde <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd4:	f023 0206 	bic.w	r2, r3, #6
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	645a      	str	r2, [r3, #68]	; 0x44
 8001cdc:	e002      	b.n	8001ce4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cec:	4b2b      	ldr	r3, [pc, #172]	; (8001d9c <HAL_ADC_Start+0x17c>)
 8001cee:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001cf8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 031f 	and.w	r3, r3, #31
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d12a      	bne.n	8001d5c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a25      	ldr	r2, [pc, #148]	; (8001da0 <HAL_ADC_Start+0x180>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d015      	beq.n	8001d3c <HAL_ADC_Start+0x11c>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a23      	ldr	r2, [pc, #140]	; (8001da4 <HAL_ADC_Start+0x184>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d105      	bne.n	8001d26 <HAL_ADC_Start+0x106>
 8001d1a:	4b20      	ldr	r3, [pc, #128]	; (8001d9c <HAL_ADC_Start+0x17c>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 031f 	and.w	r3, r3, #31
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00a      	beq.n	8001d3c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a1f      	ldr	r2, [pc, #124]	; (8001da8 <HAL_ADC_Start+0x188>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d129      	bne.n	8001d84 <HAL_ADC_Start+0x164>
 8001d30:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <HAL_ADC_Start+0x17c>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0310 	and.w	r3, r3, #16
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d123      	bne.n	8001d84 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d11c      	bne.n	8001d84 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	e013      	b.n	8001d84 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0f      	ldr	r2, [pc, #60]	; (8001da0 <HAL_ADC_Start+0x180>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d10e      	bne.n	8001d84 <HAL_ADC_Start+0x164>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d107      	bne.n	8001d84 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d82:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	20000004 	.word	0x20000004
 8001d98:	431bde83 	.word	0x431bde83
 8001d9c:	40012300 	.word	0x40012300
 8001da0:	40012000 	.word	0x40012000
 8001da4:	40012100 	.word	0x40012100
 8001da8:	40012200 	.word	0x40012200

08001dac <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d101      	bne.n	8001dc2 <HAL_ADC_Stop+0x16>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e021      	b.n	8001e06 <HAL_ADC_Stop+0x5a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0201 	bic.w	r2, r2, #1
 8001dd8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d109      	bne.n	8001dfc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001df0:	f023 0301 	bic.w	r3, r3, #1
 8001df4:	f043 0201 	orr.w	r2, r3, #1
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b084      	sub	sp, #16
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e2e:	d113      	bne.n	8001e58 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e3e:	d10b      	bne.n	8001e58 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	f043 0220 	orr.w	r2, r3, #32
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e05c      	b.n	8001f12 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001e58:	f7ff fe6e 	bl	8001b38 <HAL_GetTick>
 8001e5c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e5e:	e01a      	b.n	8001e96 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e66:	d016      	beq.n	8001e96 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d007      	beq.n	8001e7e <HAL_ADC_PollForConversion+0x6c>
 8001e6e:	f7ff fe63 	bl	8001b38 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d20b      	bcs.n	8001e96 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f043 0204 	orr.w	r2, r3, #4
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e03d      	b.n	8001f12 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d1dd      	bne.n	8001e60 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f06f 0212 	mvn.w	r2, #18
 8001eac:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d123      	bne.n	8001f10 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d11f      	bne.n	8001f10 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d006      	beq.n	8001eec <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d111      	bne.n	8001f10 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d105      	bne.n	8001f10 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	f043 0201 	orr.w	r2, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d101      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x1c>
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	e105      	b.n	800215c <HAL_ADC_ConfigChannel+0x228>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b09      	cmp	r3, #9
 8001f5e:	d925      	bls.n	8001fac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68d9      	ldr	r1, [r3, #12]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4613      	mov	r3, r2
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	4413      	add	r3, r2
 8001f74:	3b1e      	subs	r3, #30
 8001f76:	2207      	movs	r2, #7
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43da      	mvns	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	400a      	ands	r2, r1
 8001f84:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68d9      	ldr	r1, [r3, #12]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	4618      	mov	r0, r3
 8001f98:	4603      	mov	r3, r0
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	4403      	add	r3, r0
 8001f9e:	3b1e      	subs	r3, #30
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	e022      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6919      	ldr	r1, [r3, #16]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4613      	mov	r3, r2
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	4413      	add	r3, r2
 8001fc0:	2207      	movs	r2, #7
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43da      	mvns	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	400a      	ands	r2, r1
 8001fce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6919      	ldr	r1, [r3, #16]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4403      	add	r3, r0
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b06      	cmp	r3, #6
 8001ff8:	d824      	bhi.n	8002044 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	3b05      	subs	r3, #5
 800200c:	221f      	movs	r2, #31
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43da      	mvns	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	400a      	ands	r2, r1
 800201a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	b29b      	uxth	r3, r3
 8002028:	4618      	mov	r0, r3
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	3b05      	subs	r3, #5
 8002036:	fa00 f203 	lsl.w	r2, r0, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	635a      	str	r2, [r3, #52]	; 0x34
 8002042:	e04c      	b.n	80020de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b0c      	cmp	r3, #12
 800204a:	d824      	bhi.n	8002096 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	3b23      	subs	r3, #35	; 0x23
 800205e:	221f      	movs	r2, #31
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43da      	mvns	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	400a      	ands	r2, r1
 800206c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	b29b      	uxth	r3, r3
 800207a:	4618      	mov	r0, r3
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	3b23      	subs	r3, #35	; 0x23
 8002088:	fa00 f203 	lsl.w	r2, r0, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	631a      	str	r2, [r3, #48]	; 0x30
 8002094:	e023      	b.n	80020de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	3b41      	subs	r3, #65	; 0x41
 80020a8:	221f      	movs	r2, #31
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43da      	mvns	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	400a      	ands	r2, r1
 80020b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	4618      	mov	r0, r3
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	3b41      	subs	r3, #65	; 0x41
 80020d2:	fa00 f203 	lsl.w	r2, r0, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020de:	4b22      	ldr	r3, [pc, #136]	; (8002168 <HAL_ADC_ConfigChannel+0x234>)
 80020e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a21      	ldr	r2, [pc, #132]	; (800216c <HAL_ADC_ConfigChannel+0x238>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d109      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x1cc>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b12      	cmp	r3, #18
 80020f2:	d105      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a19      	ldr	r2, [pc, #100]	; (800216c <HAL_ADC_ConfigChannel+0x238>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d123      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x21e>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2b10      	cmp	r3, #16
 8002110:	d003      	beq.n	800211a <HAL_ADC_ConfigChannel+0x1e6>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b11      	cmp	r3, #17
 8002118:	d11b      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2b10      	cmp	r3, #16
 800212c:	d111      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800212e:	4b10      	ldr	r3, [pc, #64]	; (8002170 <HAL_ADC_ConfigChannel+0x23c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a10      	ldr	r2, [pc, #64]	; (8002174 <HAL_ADC_ConfigChannel+0x240>)
 8002134:	fba2 2303 	umull	r2, r3, r2, r3
 8002138:	0c9a      	lsrs	r2, r3, #18
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002144:	e002      	b.n	800214c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	3b01      	subs	r3, #1
 800214a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f9      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	40012300 	.word	0x40012300
 800216c:	40012000 	.word	0x40012000
 8002170:	20000004 	.word	0x20000004
 8002174:	431bde83 	.word	0x431bde83

08002178 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002180:	4b79      	ldr	r3, [pc, #484]	; (8002368 <ADC_Init+0x1f0>)
 8002182:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	431a      	orrs	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6859      	ldr	r1, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	021a      	lsls	r2, r3, #8
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6859      	ldr	r1, [r3, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6899      	ldr	r1, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220a:	4a58      	ldr	r2, [pc, #352]	; (800236c <ADC_Init+0x1f4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d022      	beq.n	8002256 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689a      	ldr	r2, [r3, #8]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800221e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6899      	ldr	r1, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002240:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6899      	ldr	r1, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	e00f      	b.n	8002276 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002264:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002274:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0202 	bic.w	r2, r2, #2
 8002284:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6899      	ldr	r1, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	7e1b      	ldrb	r3, [r3, #24]
 8002290:	005a      	lsls	r2, r3, #1
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d01b      	beq.n	80022dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6859      	ldr	r1, [r3, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	3b01      	subs	r3, #1
 80022d0:	035a      	lsls	r2, r3, #13
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	e007      	b.n	80022ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	3b01      	subs	r3, #1
 8002308:	051a      	lsls	r2, r3, #20
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002320:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6899      	ldr	r1, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800232e:	025a      	lsls	r2, r3, #9
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002346:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6899      	ldr	r1, [r3, #8]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	029a      	lsls	r2, r3, #10
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	609a      	str	r2, [r3, #8]
}
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	40012300 	.word	0x40012300
 800236c:	0f000001 	.word	0x0f000001

08002370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002380:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800238c:	4013      	ands	r3, r2
 800238e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002398:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800239c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023a2:	4a04      	ldr	r2, [pc, #16]	; (80023b4 <__NVIC_SetPriorityGrouping+0x44>)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	60d3      	str	r3, [r2, #12]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023bc:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <__NVIC_GetPriorityGrouping+0x18>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	0a1b      	lsrs	r3, r3, #8
 80023c2:	f003 0307 	and.w	r3, r3, #7
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	db0b      	blt.n	80023fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	f003 021f 	and.w	r2, r3, #31
 80023ec:	4907      	ldr	r1, [pc, #28]	; (800240c <__NVIC_EnableIRQ+0x38>)
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	2001      	movs	r0, #1
 80023f6:	fa00 f202 	lsl.w	r2, r0, r2
 80023fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000e100 	.word	0xe000e100

08002410 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	2b00      	cmp	r3, #0
 8002420:	db12      	blt.n	8002448 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	f003 021f 	and.w	r2, r3, #31
 8002428:	490a      	ldr	r1, [pc, #40]	; (8002454 <__NVIC_DisableIRQ+0x44>)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	2001      	movs	r0, #1
 8002432:	fa00 f202 	lsl.w	r2, r0, r2
 8002436:	3320      	adds	r3, #32
 8002438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800243c:	f3bf 8f4f 	dsb	sy
}
 8002440:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002442:	f3bf 8f6f 	isb	sy
}
 8002446:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	e000e100 	.word	0xe000e100

08002458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	6039      	str	r1, [r7, #0]
 8002462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	2b00      	cmp	r3, #0
 800246a:	db0a      	blt.n	8002482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	b2da      	uxtb	r2, r3
 8002470:	490c      	ldr	r1, [pc, #48]	; (80024a4 <__NVIC_SetPriority+0x4c>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	0112      	lsls	r2, r2, #4
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	440b      	add	r3, r1
 800247c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002480:	e00a      	b.n	8002498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4908      	ldr	r1, [pc, #32]	; (80024a8 <__NVIC_SetPriority+0x50>)
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	3b04      	subs	r3, #4
 8002490:	0112      	lsls	r2, r2, #4
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	440b      	add	r3, r1
 8002496:	761a      	strb	r2, [r3, #24]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000e100 	.word	0xe000e100
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b089      	sub	sp, #36	; 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f1c3 0307 	rsb	r3, r3, #7
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	bf28      	it	cs
 80024ca:	2304      	movcs	r3, #4
 80024cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3304      	adds	r3, #4
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d902      	bls.n	80024dc <NVIC_EncodePriority+0x30>
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3b03      	subs	r3, #3
 80024da:	e000      	b.n	80024de <NVIC_EncodePriority+0x32>
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	f04f 32ff 	mov.w	r2, #4294967295
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43da      	mvns	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	401a      	ands	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f4:	f04f 31ff 	mov.w	r1, #4294967295
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	43d9      	mvns	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	4313      	orrs	r3, r2
         );
}
 8002506:	4618      	mov	r0, r3
 8002508:	3724      	adds	r7, #36	; 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3b01      	subs	r3, #1
 8002520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002524:	d301      	bcc.n	800252a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002526:	2301      	movs	r3, #1
 8002528:	e00f      	b.n	800254a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800252a:	4a0a      	ldr	r2, [pc, #40]	; (8002554 <SysTick_Config+0x40>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3b01      	subs	r3, #1
 8002530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002532:	210f      	movs	r1, #15
 8002534:	f04f 30ff 	mov.w	r0, #4294967295
 8002538:	f7ff ff8e 	bl	8002458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800253c:	4b05      	ldr	r3, [pc, #20]	; (8002554 <SysTick_Config+0x40>)
 800253e:	2200      	movs	r2, #0
 8002540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002542:	4b04      	ldr	r3, [pc, #16]	; (8002554 <SysTick_Config+0x40>)
 8002544:	2207      	movs	r2, #7
 8002546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	e000e010 	.word	0xe000e010

08002558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff ff05 	bl	8002370 <__NVIC_SetPriorityGrouping>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800256e:	b580      	push	{r7, lr}
 8002570:	b086      	sub	sp, #24
 8002572:	af00      	add	r7, sp, #0
 8002574:	4603      	mov	r3, r0
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	607a      	str	r2, [r7, #4]
 800257a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002580:	f7ff ff1a 	bl	80023b8 <__NVIC_GetPriorityGrouping>
 8002584:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	6978      	ldr	r0, [r7, #20]
 800258c:	f7ff ff8e 	bl	80024ac <NVIC_EncodePriority>
 8002590:	4602      	mov	r2, r0
 8002592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ff5d 	bl	8002458 <__NVIC_SetPriority>
}
 800259e:	bf00      	nop
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	4603      	mov	r3, r0
 80025ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ff0d 	bl	80023d4 <__NVIC_EnableIRQ>
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	4603      	mov	r3, r0
 80025ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80025cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff1d 	bl	8002410 <__NVIC_DisableIRQ>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff ff94 	bl	8002514 <SysTick_Config>
 80025ec:	4603      	mov	r3, r0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b089      	sub	sp, #36	; 0x24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002606:	2300      	movs	r3, #0
 8002608:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800260a:	2300      	movs	r3, #0
 800260c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800260e:	2300      	movs	r3, #0
 8002610:	61fb      	str	r3, [r7, #28]
 8002612:	e16b      	b.n	80028ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002614:	2201      	movs	r2, #1
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4013      	ands	r3, r2
 8002626:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	429a      	cmp	r2, r3
 800262e:	f040 815a 	bne.w	80028e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d00b      	beq.n	8002652 <HAL_GPIO_Init+0x5a>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d007      	beq.n	8002652 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002646:	2b11      	cmp	r3, #17
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b12      	cmp	r3, #18
 8002650:	d130      	bne.n	80026b4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	2203      	movs	r2, #3
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002688:	2201      	movs	r2, #1
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	f003 0201 	and.w	r2, r3, #1
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	2203      	movs	r2, #3
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4313      	orrs	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d003      	beq.n	80026f4 <HAL_GPIO_Init+0xfc>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b12      	cmp	r3, #18
 80026f2:	d123      	bne.n	800273c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	08da      	lsrs	r2, r3, #3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3208      	adds	r2, #8
 80026fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002700:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	220f      	movs	r2, #15
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	08da      	lsrs	r2, r3, #3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3208      	adds	r2, #8
 8002736:	69b9      	ldr	r1, [r7, #24]
 8002738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	2203      	movs	r2, #3
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 0203 	and.w	r2, r3, #3
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4313      	orrs	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 80b4 	beq.w	80028e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	4b60      	ldr	r3, [pc, #384]	; (8002904 <HAL_GPIO_Init+0x30c>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	4a5f      	ldr	r2, [pc, #380]	; (8002904 <HAL_GPIO_Init+0x30c>)
 8002788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800278c:	6453      	str	r3, [r2, #68]	; 0x44
 800278e:	4b5d      	ldr	r3, [pc, #372]	; (8002904 <HAL_GPIO_Init+0x30c>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800279a:	4a5b      	ldr	r2, [pc, #364]	; (8002908 <HAL_GPIO_Init+0x310>)
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	089b      	lsrs	r3, r3, #2
 80027a0:	3302      	adds	r3, #2
 80027a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	220f      	movs	r2, #15
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a52      	ldr	r2, [pc, #328]	; (800290c <HAL_GPIO_Init+0x314>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d02b      	beq.n	800281e <HAL_GPIO_Init+0x226>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a51      	ldr	r2, [pc, #324]	; (8002910 <HAL_GPIO_Init+0x318>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d025      	beq.n	800281a <HAL_GPIO_Init+0x222>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a50      	ldr	r2, [pc, #320]	; (8002914 <HAL_GPIO_Init+0x31c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d01f      	beq.n	8002816 <HAL_GPIO_Init+0x21e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a4f      	ldr	r2, [pc, #316]	; (8002918 <HAL_GPIO_Init+0x320>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d019      	beq.n	8002812 <HAL_GPIO_Init+0x21a>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a4e      	ldr	r2, [pc, #312]	; (800291c <HAL_GPIO_Init+0x324>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d013      	beq.n	800280e <HAL_GPIO_Init+0x216>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a4d      	ldr	r2, [pc, #308]	; (8002920 <HAL_GPIO_Init+0x328>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00d      	beq.n	800280a <HAL_GPIO_Init+0x212>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a4c      	ldr	r2, [pc, #304]	; (8002924 <HAL_GPIO_Init+0x32c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d007      	beq.n	8002806 <HAL_GPIO_Init+0x20e>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a4b      	ldr	r2, [pc, #300]	; (8002928 <HAL_GPIO_Init+0x330>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d101      	bne.n	8002802 <HAL_GPIO_Init+0x20a>
 80027fe:	2307      	movs	r3, #7
 8002800:	e00e      	b.n	8002820 <HAL_GPIO_Init+0x228>
 8002802:	2308      	movs	r3, #8
 8002804:	e00c      	b.n	8002820 <HAL_GPIO_Init+0x228>
 8002806:	2306      	movs	r3, #6
 8002808:	e00a      	b.n	8002820 <HAL_GPIO_Init+0x228>
 800280a:	2305      	movs	r3, #5
 800280c:	e008      	b.n	8002820 <HAL_GPIO_Init+0x228>
 800280e:	2304      	movs	r3, #4
 8002810:	e006      	b.n	8002820 <HAL_GPIO_Init+0x228>
 8002812:	2303      	movs	r3, #3
 8002814:	e004      	b.n	8002820 <HAL_GPIO_Init+0x228>
 8002816:	2302      	movs	r3, #2
 8002818:	e002      	b.n	8002820 <HAL_GPIO_Init+0x228>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <HAL_GPIO_Init+0x228>
 800281e:	2300      	movs	r3, #0
 8002820:	69fa      	ldr	r2, [r7, #28]
 8002822:	f002 0203 	and.w	r2, r2, #3
 8002826:	0092      	lsls	r2, r2, #2
 8002828:	4093      	lsls	r3, r2
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002830:	4935      	ldr	r1, [pc, #212]	; (8002908 <HAL_GPIO_Init+0x310>)
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	089b      	lsrs	r3, r3, #2
 8002836:	3302      	adds	r3, #2
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800283e:	4b3b      	ldr	r3, [pc, #236]	; (800292c <HAL_GPIO_Init+0x334>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002862:	4a32      	ldr	r2, [pc, #200]	; (800292c <HAL_GPIO_Init+0x334>)
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002868:	4b30      	ldr	r3, [pc, #192]	; (800292c <HAL_GPIO_Init+0x334>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800288c:	4a27      	ldr	r2, [pc, #156]	; (800292c <HAL_GPIO_Init+0x334>)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002892:	4b26      	ldr	r3, [pc, #152]	; (800292c <HAL_GPIO_Init+0x334>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028b6:	4a1d      	ldr	r2, [pc, #116]	; (800292c <HAL_GPIO_Init+0x334>)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028bc:	4b1b      	ldr	r3, [pc, #108]	; (800292c <HAL_GPIO_Init+0x334>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028e0:	4a12      	ldr	r2, [pc, #72]	; (800292c <HAL_GPIO_Init+0x334>)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	3301      	adds	r3, #1
 80028ea:	61fb      	str	r3, [r7, #28]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	2b0f      	cmp	r3, #15
 80028f0:	f67f ae90 	bls.w	8002614 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028f4:	bf00      	nop
 80028f6:	bf00      	nop
 80028f8:	3724      	adds	r7, #36	; 0x24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40023800 	.word	0x40023800
 8002908:	40013800 	.word	0x40013800
 800290c:	40020000 	.word	0x40020000
 8002910:	40020400 	.word	0x40020400
 8002914:	40020800 	.word	0x40020800
 8002918:	40020c00 	.word	0x40020c00
 800291c:	40021000 	.word	0x40021000
 8002920:	40021400 	.word	0x40021400
 8002924:	40021800 	.word	0x40021800
 8002928:	40021c00 	.word	0x40021c00
 800292c:	40013c00 	.word	0x40013c00

08002930 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691a      	ldr	r2, [r3, #16]
 8002940:	887b      	ldrh	r3, [r7, #2]
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002948:	2301      	movs	r3, #1
 800294a:	73fb      	strb	r3, [r7, #15]
 800294c:	e001      	b.n	8002952 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800294e:	2300      	movs	r3, #0
 8002950:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002952:	7bfb      	ldrb	r3, [r7, #15]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	807b      	strh	r3, [r7, #2]
 800296c:	4613      	mov	r3, r2
 800296e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002970:	787b      	ldrb	r3, [r7, #1]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002976:	887a      	ldrh	r2, [r7, #2]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800297c:	e003      	b.n	8002986 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800297e:	887b      	ldrh	r3, [r7, #2]
 8002980:	041a      	lsls	r2, r3, #16
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	619a      	str	r2, [r3, #24]
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
	...

08002994 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800299e:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	88fb      	ldrh	r3, [r7, #6]
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d006      	beq.n	80029b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029aa:	4a05      	ldr	r2, [pc, #20]	; (80029c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029ac:	88fb      	ldrh	r3, [r7, #6]
 80029ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe f9ea 	bl	8000d8c <HAL_GPIO_EXTI_Callback>
  }
}
 80029b8:	bf00      	nop
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40013c00 	.word	0x40013c00

080029c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e12b      	b.n	8002c2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d106      	bne.n	80029f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7fe fe92 	bl	8001714 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2224      	movs	r2, #36	; 0x24
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0201 	bic.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a28:	f000 fd28 	bl	800347c <HAL_RCC_GetPCLK1Freq>
 8002a2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	4a81      	ldr	r2, [pc, #516]	; (8002c38 <HAL_I2C_Init+0x274>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d807      	bhi.n	8002a48 <HAL_I2C_Init+0x84>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4a80      	ldr	r2, [pc, #512]	; (8002c3c <HAL_I2C_Init+0x278>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	bf94      	ite	ls
 8002a40:	2301      	movls	r3, #1
 8002a42:	2300      	movhi	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	e006      	b.n	8002a56 <HAL_I2C_Init+0x92>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4a7d      	ldr	r2, [pc, #500]	; (8002c40 <HAL_I2C_Init+0x27c>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	bf94      	ite	ls
 8002a50:	2301      	movls	r3, #1
 8002a52:	2300      	movhi	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e0e7      	b.n	8002c2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4a78      	ldr	r2, [pc, #480]	; (8002c44 <HAL_I2C_Init+0x280>)
 8002a62:	fba2 2303 	umull	r2, r3, r2, r3
 8002a66:	0c9b      	lsrs	r3, r3, #18
 8002a68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	4a6a      	ldr	r2, [pc, #424]	; (8002c38 <HAL_I2C_Init+0x274>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d802      	bhi.n	8002a98 <HAL_I2C_Init+0xd4>
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	3301      	adds	r3, #1
 8002a96:	e009      	b.n	8002aac <HAL_I2C_Init+0xe8>
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a9e:	fb02 f303 	mul.w	r3, r2, r3
 8002aa2:	4a69      	ldr	r2, [pc, #420]	; (8002c48 <HAL_I2C_Init+0x284>)
 8002aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa8:	099b      	lsrs	r3, r3, #6
 8002aaa:	3301      	adds	r3, #1
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002abe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	495c      	ldr	r1, [pc, #368]	; (8002c38 <HAL_I2C_Init+0x274>)
 8002ac8:	428b      	cmp	r3, r1
 8002aca:	d819      	bhi.n	8002b00 <HAL_I2C_Init+0x13c>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	1e59      	subs	r1, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ada:	1c59      	adds	r1, r3, #1
 8002adc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ae0:	400b      	ands	r3, r1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00a      	beq.n	8002afc <HAL_I2C_Init+0x138>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1e59      	subs	r1, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002af4:	3301      	adds	r3, #1
 8002af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002afa:	e051      	b.n	8002ba0 <HAL_I2C_Init+0x1dc>
 8002afc:	2304      	movs	r3, #4
 8002afe:	e04f      	b.n	8002ba0 <HAL_I2C_Init+0x1dc>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d111      	bne.n	8002b2c <HAL_I2C_Init+0x168>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	1e58      	subs	r0, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6859      	ldr	r1, [r3, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	440b      	add	r3, r1
 8002b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	bf0c      	ite	eq
 8002b24:	2301      	moveq	r3, #1
 8002b26:	2300      	movne	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	e012      	b.n	8002b52 <HAL_I2C_Init+0x18e>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1e58      	subs	r0, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6859      	ldr	r1, [r3, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	0099      	lsls	r1, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b42:	3301      	adds	r3, #1
 8002b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bf0c      	ite	eq
 8002b4c:	2301      	moveq	r3, #1
 8002b4e:	2300      	movne	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_I2C_Init+0x196>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e022      	b.n	8002ba0 <HAL_I2C_Init+0x1dc>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10e      	bne.n	8002b80 <HAL_I2C_Init+0x1bc>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	1e58      	subs	r0, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6859      	ldr	r1, [r3, #4]
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	440b      	add	r3, r1
 8002b70:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b74:	3301      	adds	r3, #1
 8002b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b7e:	e00f      	b.n	8002ba0 <HAL_I2C_Init+0x1dc>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	1e58      	subs	r0, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6859      	ldr	r1, [r3, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	0099      	lsls	r1, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b96:	3301      	adds	r3, #1
 8002b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	6809      	ldr	r1, [r1, #0]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69da      	ldr	r2, [r3, #28]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6911      	ldr	r1, [r2, #16]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	68d2      	ldr	r2, [r2, #12]
 8002bda:	4311      	orrs	r1, r2
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	430b      	orrs	r3, r1
 8002be2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	000186a0 	.word	0x000186a0
 8002c3c:	001e847f 	.word	0x001e847f
 8002c40:	003d08ff 	.word	0x003d08ff
 8002c44:	431bde83 	.word	0x431bde83
 8002c48:	10624dd3 	.word	0x10624dd3

08002c4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e25b      	b.n	8003116 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d075      	beq.n	8002d56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c6a:	4ba3      	ldr	r3, [pc, #652]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d00c      	beq.n	8002c90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c76:	4ba0      	ldr	r3, [pc, #640]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d112      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c82:	4b9d      	ldr	r3, [pc, #628]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c8e:	d10b      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c90:	4b99      	ldr	r3, [pc, #612]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d05b      	beq.n	8002d54 <HAL_RCC_OscConfig+0x108>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d157      	bne.n	8002d54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e236      	b.n	8003116 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb0:	d106      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x74>
 8002cb2:	4b91      	ldr	r3, [pc, #580]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a90      	ldr	r2, [pc, #576]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	e01d      	b.n	8002cfc <HAL_RCC_OscConfig+0xb0>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cc8:	d10c      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x98>
 8002cca:	4b8b      	ldr	r3, [pc, #556]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a8a      	ldr	r2, [pc, #552]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	4b88      	ldr	r3, [pc, #544]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a87      	ldr	r2, [pc, #540]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	e00b      	b.n	8002cfc <HAL_RCC_OscConfig+0xb0>
 8002ce4:	4b84      	ldr	r3, [pc, #528]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a83      	ldr	r2, [pc, #524]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cee:	6013      	str	r3, [r2, #0]
 8002cf0:	4b81      	ldr	r3, [pc, #516]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a80      	ldr	r2, [pc, #512]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d013      	beq.n	8002d2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d04:	f7fe ff18 	bl	8001b38 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d0c:	f7fe ff14 	bl	8001b38 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	; 0x64
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e1fb      	b.n	8003116 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1e:	4b76      	ldr	r3, [pc, #472]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0xc0>
 8002d2a:	e014      	b.n	8002d56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2c:	f7fe ff04 	bl	8001b38 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d34:	f7fe ff00 	bl	8001b38 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b64      	cmp	r3, #100	; 0x64
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e1e7      	b.n	8003116 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d46:	4b6c      	ldr	r3, [pc, #432]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f0      	bne.n	8002d34 <HAL_RCC_OscConfig+0xe8>
 8002d52:	e000      	b.n	8002d56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d063      	beq.n	8002e2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d62:	4b65      	ldr	r3, [pc, #404]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 030c 	and.w	r3, r3, #12
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00b      	beq.n	8002d86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d6e:	4b62      	ldr	r3, [pc, #392]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d11c      	bne.n	8002db4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d7a:	4b5f      	ldr	r3, [pc, #380]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d116      	bne.n	8002db4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d86:	4b5c      	ldr	r3, [pc, #368]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d005      	beq.n	8002d9e <HAL_RCC_OscConfig+0x152>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d001      	beq.n	8002d9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e1bb      	b.n	8003116 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d9e:	4b56      	ldr	r3, [pc, #344]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	4952      	ldr	r1, [pc, #328]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002db2:	e03a      	b.n	8002e2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d020      	beq.n	8002dfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dbc:	4b4f      	ldr	r3, [pc, #316]	; (8002efc <HAL_RCC_OscConfig+0x2b0>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc2:	f7fe feb9 	bl	8001b38 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dca:	f7fe feb5 	bl	8001b38 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e19c      	b.n	8003116 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ddc:	4b46      	ldr	r3, [pc, #280]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0f0      	beq.n	8002dca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de8:	4b43      	ldr	r3, [pc, #268]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	4940      	ldr	r1, [pc, #256]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	600b      	str	r3, [r1, #0]
 8002dfc:	e015      	b.n	8002e2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dfe:	4b3f      	ldr	r3, [pc, #252]	; (8002efc <HAL_RCC_OscConfig+0x2b0>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e04:	f7fe fe98 	bl	8001b38 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e0c:	f7fe fe94 	bl	8001b38 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e17b      	b.n	8003116 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e1e:	4b36      	ldr	r3, [pc, #216]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f0      	bne.n	8002e0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d030      	beq.n	8002e98 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d016      	beq.n	8002e6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e3e:	4b30      	ldr	r3, [pc, #192]	; (8002f00 <HAL_RCC_OscConfig+0x2b4>)
 8002e40:	2201      	movs	r2, #1
 8002e42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e44:	f7fe fe78 	bl	8001b38 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e4c:	f7fe fe74 	bl	8001b38 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e15b      	b.n	8003116 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e5e:	4b26      	ldr	r3, [pc, #152]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0f0      	beq.n	8002e4c <HAL_RCC_OscConfig+0x200>
 8002e6a:	e015      	b.n	8002e98 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e6c:	4b24      	ldr	r3, [pc, #144]	; (8002f00 <HAL_RCC_OscConfig+0x2b4>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e72:	f7fe fe61 	bl	8001b38 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e7a:	f7fe fe5d 	bl	8001b38 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e144      	b.n	8003116 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e8c:	4b1a      	ldr	r3, [pc, #104]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1f0      	bne.n	8002e7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 80a0 	beq.w	8002fe6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eaa:	4b13      	ldr	r3, [pc, #76]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10f      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	4b0f      	ldr	r3, [pc, #60]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	4a0e      	ldr	r2, [pc, #56]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec6:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <HAL_RCC_OscConfig+0x2ac>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed6:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <HAL_RCC_OscConfig+0x2b8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d121      	bne.n	8002f26 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ee2:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <HAL_RCC_OscConfig+0x2b8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a07      	ldr	r2, [pc, #28]	; (8002f04 <HAL_RCC_OscConfig+0x2b8>)
 8002ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eee:	f7fe fe23 	bl	8001b38 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef4:	e011      	b.n	8002f1a <HAL_RCC_OscConfig+0x2ce>
 8002ef6:	bf00      	nop
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	42470000 	.word	0x42470000
 8002f00:	42470e80 	.word	0x42470e80
 8002f04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f08:	f7fe fe16 	bl	8001b38 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e0fd      	b.n	8003116 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f1a:	4b81      	ldr	r3, [pc, #516]	; (8003120 <HAL_RCC_OscConfig+0x4d4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d106      	bne.n	8002f3c <HAL_RCC_OscConfig+0x2f0>
 8002f2e:	4b7d      	ldr	r3, [pc, #500]	; (8003124 <HAL_RCC_OscConfig+0x4d8>)
 8002f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f32:	4a7c      	ldr	r2, [pc, #496]	; (8003124 <HAL_RCC_OscConfig+0x4d8>)
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	6713      	str	r3, [r2, #112]	; 0x70
 8002f3a:	e01c      	b.n	8002f76 <HAL_RCC_OscConfig+0x32a>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2b05      	cmp	r3, #5
 8002f42:	d10c      	bne.n	8002f5e <HAL_RCC_OscConfig+0x312>
 8002f44:	4b77      	ldr	r3, [pc, #476]	; (8003124 <HAL_RCC_OscConfig+0x4d8>)
 8002f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f48:	4a76      	ldr	r2, [pc, #472]	; (8003124 <HAL_RCC_OscConfig+0x4d8>)
 8002f4a:	f043 0304 	orr.w	r3, r3, #4
 8002f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f50:	4b74      	ldr	r3, [pc, #464]	; (8003124 <HAL_RCC_OscConfig+0x4d8>)
 8002f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f54:	4a73      	ldr	r2, [pc, #460]	; (8003124 <HAL_RCC_OscConfig+0x4d8>)
 8002f56:	f043 0301 	orr.w	r3, r3, #1
 8002f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5c:	e00b      	b.n	8002f76 <HAL_RCC_OscConfig+0x32a>
 8002f5e:	4b71      	ldr	r3, [pc, #452]	; (8003124 <HAL_RCC_OscConfig+0x4d8>)
 8002f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f62:	4a70      	ldr	r2, [pc, #448]	; (8003124 <HAL_RCC_OscConfig+0x4d8>)
 8002f64:	f023 0301 	bic.w	r3, r3, #1
 8002f68:	6713      	str	r3, [r2, #112]	; 0x70
 8002f6a:	4b6e      	ldr	r3, [pc, #440]	; (8003124 <HAL_RCC_OscConfig+0x4d8>)
 8002f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6e:	4a6d      	ldr	r2, [pc, #436]	; (8003124 <HAL_RCC_OscConfig+0x4d8>)
 8002f70:	f023 0304 	bic.w	r3, r3, #4
 8002f74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d015      	beq.n	8002faa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7e:	f7fe fddb 	bl	8001b38 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f84:	e00a      	b.n	8002f9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f86:	f7fe fdd7 	bl	8001b38 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e0bc      	b.n	8003116 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f9c:	4b61      	ldr	r3, [pc, #388]	; (8003124 <HAL_RCC_OscConfig+0x4d8>)
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0ee      	beq.n	8002f86 <HAL_RCC_OscConfig+0x33a>
 8002fa8:	e014      	b.n	8002fd4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002faa:	f7fe fdc5 	bl	8001b38 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb0:	e00a      	b.n	8002fc8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fb2:	f7fe fdc1 	bl	8001b38 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e0a6      	b.n	8003116 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc8:	4b56      	ldr	r3, [pc, #344]	; (8003124 <HAL_RCC_OscConfig+0x4d8>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1ee      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fd4:	7dfb      	ldrb	r3, [r7, #23]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d105      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fda:	4b52      	ldr	r3, [pc, #328]	; (8003124 <HAL_RCC_OscConfig+0x4d8>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	4a51      	ldr	r2, [pc, #324]	; (8003124 <HAL_RCC_OscConfig+0x4d8>)
 8002fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fe4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 8092 	beq.w	8003114 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ff0:	4b4c      	ldr	r3, [pc, #304]	; (8003124 <HAL_RCC_OscConfig+0x4d8>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 030c 	and.w	r3, r3, #12
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d05c      	beq.n	80030b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	2b02      	cmp	r3, #2
 8003002:	d141      	bne.n	8003088 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003004:	4b48      	ldr	r3, [pc, #288]	; (8003128 <HAL_RCC_OscConfig+0x4dc>)
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300a:	f7fe fd95 	bl	8001b38 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003012:	f7fe fd91 	bl	8001b38 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e078      	b.n	8003116 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003024:	4b3f      	ldr	r3, [pc, #252]	; (8003124 <HAL_RCC_OscConfig+0x4d8>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1f0      	bne.n	8003012 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69da      	ldr	r2, [r3, #28]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	431a      	orrs	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	019b      	lsls	r3, r3, #6
 8003040:	431a      	orrs	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003046:	085b      	lsrs	r3, r3, #1
 8003048:	3b01      	subs	r3, #1
 800304a:	041b      	lsls	r3, r3, #16
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003052:	061b      	lsls	r3, r3, #24
 8003054:	4933      	ldr	r1, [pc, #204]	; (8003124 <HAL_RCC_OscConfig+0x4d8>)
 8003056:	4313      	orrs	r3, r2
 8003058:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800305a:	4b33      	ldr	r3, [pc, #204]	; (8003128 <HAL_RCC_OscConfig+0x4dc>)
 800305c:	2201      	movs	r2, #1
 800305e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003060:	f7fe fd6a 	bl	8001b38 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003068:	f7fe fd66 	bl	8001b38 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e04d      	b.n	8003116 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800307a:	4b2a      	ldr	r3, [pc, #168]	; (8003124 <HAL_RCC_OscConfig+0x4d8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f0      	beq.n	8003068 <HAL_RCC_OscConfig+0x41c>
 8003086:	e045      	b.n	8003114 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003088:	4b27      	ldr	r3, [pc, #156]	; (8003128 <HAL_RCC_OscConfig+0x4dc>)
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308e:	f7fe fd53 	bl	8001b38 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003096:	f7fe fd4f 	bl	8001b38 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e036      	b.n	8003116 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a8:	4b1e      	ldr	r3, [pc, #120]	; (8003124 <HAL_RCC_OscConfig+0x4d8>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1f0      	bne.n	8003096 <HAL_RCC_OscConfig+0x44a>
 80030b4:	e02e      	b.n	8003114 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e029      	b.n	8003116 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030c2:	4b18      	ldr	r3, [pc, #96]	; (8003124 <HAL_RCC_OscConfig+0x4d8>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d11c      	bne.n	8003110 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d115      	bne.n	8003110 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030ea:	4013      	ands	r3, r2
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d10d      	bne.n	8003110 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80030fe:	429a      	cmp	r2, r3
 8003100:	d106      	bne.n	8003110 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800310c:	429a      	cmp	r2, r3
 800310e:	d001      	beq.n	8003114 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e000      	b.n	8003116 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40007000 	.word	0x40007000
 8003124:	40023800 	.word	0x40023800
 8003128:	42470060 	.word	0x42470060

0800312c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0cc      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003140:	4b68      	ldr	r3, [pc, #416]	; (80032e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d90c      	bls.n	8003168 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314e:	4b65      	ldr	r3, [pc, #404]	; (80032e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003156:	4b63      	ldr	r3, [pc, #396]	; (80032e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d001      	beq.n	8003168 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0b8      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d020      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003180:	4b59      	ldr	r3, [pc, #356]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	4a58      	ldr	r2, [pc, #352]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800318a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0308 	and.w	r3, r3, #8
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003198:	4b53      	ldr	r3, [pc, #332]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	4a52      	ldr	r2, [pc, #328]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a4:	4b50      	ldr	r3, [pc, #320]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	494d      	ldr	r1, [pc, #308]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d044      	beq.n	800324c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d107      	bne.n	80031da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ca:	4b47      	ldr	r3, [pc, #284]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d119      	bne.n	800320a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e07f      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d003      	beq.n	80031ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	d107      	bne.n	80031fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ea:	4b3f      	ldr	r3, [pc, #252]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d109      	bne.n	800320a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e06f      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fa:	4b3b      	ldr	r3, [pc, #236]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e067      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800320a:	4b37      	ldr	r3, [pc, #220]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f023 0203 	bic.w	r2, r3, #3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	4934      	ldr	r1, [pc, #208]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	4313      	orrs	r3, r2
 800321a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800321c:	f7fe fc8c 	bl	8001b38 <HAL_GetTick>
 8003220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003222:	e00a      	b.n	800323a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003224:	f7fe fc88 	bl	8001b38 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003232:	4293      	cmp	r3, r2
 8003234:	d901      	bls.n	800323a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e04f      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323a:	4b2b      	ldr	r3, [pc, #172]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 020c 	and.w	r2, r3, #12
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	429a      	cmp	r2, r3
 800324a:	d1eb      	bne.n	8003224 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800324c:	4b25      	ldr	r3, [pc, #148]	; (80032e4 <HAL_RCC_ClockConfig+0x1b8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 030f 	and.w	r3, r3, #15
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d20c      	bcs.n	8003274 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325a:	4b22      	ldr	r3, [pc, #136]	; (80032e4 <HAL_RCC_ClockConfig+0x1b8>)
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003262:	4b20      	ldr	r3, [pc, #128]	; (80032e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	429a      	cmp	r2, r3
 800326e:	d001      	beq.n	8003274 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e032      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d008      	beq.n	8003292 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003280:	4b19      	ldr	r3, [pc, #100]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	4916      	ldr	r1, [pc, #88]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	4313      	orrs	r3, r2
 8003290:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d009      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800329e:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	490e      	ldr	r1, [pc, #56]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032b2:	f000 f821 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 80032b6:	4602      	mov	r2, r0
 80032b8:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	490a      	ldr	r1, [pc, #40]	; (80032ec <HAL_RCC_ClockConfig+0x1c0>)
 80032c4:	5ccb      	ldrb	r3, [r1, r3]
 80032c6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ca:	4a09      	ldr	r2, [pc, #36]	; (80032f0 <HAL_RCC_ClockConfig+0x1c4>)
 80032cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032ce:	4b09      	ldr	r3, [pc, #36]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fe fbec 	bl	8001ab0 <HAL_InitTick>

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40023c00 	.word	0x40023c00
 80032e8:	40023800 	.word	0x40023800
 80032ec:	0800451c 	.word	0x0800451c
 80032f0:	20000004 	.word	0x20000004
 80032f4:	20000008 	.word	0x20000008

080032f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f8:	b5b0      	push	{r4, r5, r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032fe:	2100      	movs	r1, #0
 8003300:	6079      	str	r1, [r7, #4]
 8003302:	2100      	movs	r1, #0
 8003304:	60f9      	str	r1, [r7, #12]
 8003306:	2100      	movs	r1, #0
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800330a:	2100      	movs	r1, #0
 800330c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800330e:	4952      	ldr	r1, [pc, #328]	; (8003458 <HAL_RCC_GetSysClockFreq+0x160>)
 8003310:	6889      	ldr	r1, [r1, #8]
 8003312:	f001 010c 	and.w	r1, r1, #12
 8003316:	2908      	cmp	r1, #8
 8003318:	d00d      	beq.n	8003336 <HAL_RCC_GetSysClockFreq+0x3e>
 800331a:	2908      	cmp	r1, #8
 800331c:	f200 8094 	bhi.w	8003448 <HAL_RCC_GetSysClockFreq+0x150>
 8003320:	2900      	cmp	r1, #0
 8003322:	d002      	beq.n	800332a <HAL_RCC_GetSysClockFreq+0x32>
 8003324:	2904      	cmp	r1, #4
 8003326:	d003      	beq.n	8003330 <HAL_RCC_GetSysClockFreq+0x38>
 8003328:	e08e      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800332a:	4b4c      	ldr	r3, [pc, #304]	; (800345c <HAL_RCC_GetSysClockFreq+0x164>)
 800332c:	60bb      	str	r3, [r7, #8]
       break;
 800332e:	e08e      	b.n	800344e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003330:	4b4b      	ldr	r3, [pc, #300]	; (8003460 <HAL_RCC_GetSysClockFreq+0x168>)
 8003332:	60bb      	str	r3, [r7, #8]
      break;
 8003334:	e08b      	b.n	800344e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003336:	4948      	ldr	r1, [pc, #288]	; (8003458 <HAL_RCC_GetSysClockFreq+0x160>)
 8003338:	6849      	ldr	r1, [r1, #4]
 800333a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800333e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003340:	4945      	ldr	r1, [pc, #276]	; (8003458 <HAL_RCC_GetSysClockFreq+0x160>)
 8003342:	6849      	ldr	r1, [r1, #4]
 8003344:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003348:	2900      	cmp	r1, #0
 800334a:	d024      	beq.n	8003396 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800334c:	4942      	ldr	r1, [pc, #264]	; (8003458 <HAL_RCC_GetSysClockFreq+0x160>)
 800334e:	6849      	ldr	r1, [r1, #4]
 8003350:	0989      	lsrs	r1, r1, #6
 8003352:	4608      	mov	r0, r1
 8003354:	f04f 0100 	mov.w	r1, #0
 8003358:	f240 14ff 	movw	r4, #511	; 0x1ff
 800335c:	f04f 0500 	mov.w	r5, #0
 8003360:	ea00 0204 	and.w	r2, r0, r4
 8003364:	ea01 0305 	and.w	r3, r1, r5
 8003368:	493d      	ldr	r1, [pc, #244]	; (8003460 <HAL_RCC_GetSysClockFreq+0x168>)
 800336a:	fb01 f003 	mul.w	r0, r1, r3
 800336e:	2100      	movs	r1, #0
 8003370:	fb01 f102 	mul.w	r1, r1, r2
 8003374:	1844      	adds	r4, r0, r1
 8003376:	493a      	ldr	r1, [pc, #232]	; (8003460 <HAL_RCC_GetSysClockFreq+0x168>)
 8003378:	fba2 0101 	umull	r0, r1, r2, r1
 800337c:	1863      	adds	r3, r4, r1
 800337e:	4619      	mov	r1, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	461a      	mov	r2, r3
 8003384:	f04f 0300 	mov.w	r3, #0
 8003388:	f7fd fb0c 	bl	80009a4 <__aeabi_uldivmod>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4613      	mov	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	e04a      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003396:	4b30      	ldr	r3, [pc, #192]	; (8003458 <HAL_RCC_GetSysClockFreq+0x160>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	099b      	lsrs	r3, r3, #6
 800339c:	461a      	mov	r2, r3
 800339e:	f04f 0300 	mov.w	r3, #0
 80033a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033a6:	f04f 0100 	mov.w	r1, #0
 80033aa:	ea02 0400 	and.w	r4, r2, r0
 80033ae:	ea03 0501 	and.w	r5, r3, r1
 80033b2:	4620      	mov	r0, r4
 80033b4:	4629      	mov	r1, r5
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	f04f 0300 	mov.w	r3, #0
 80033be:	014b      	lsls	r3, r1, #5
 80033c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033c4:	0142      	lsls	r2, r0, #5
 80033c6:	4610      	mov	r0, r2
 80033c8:	4619      	mov	r1, r3
 80033ca:	1b00      	subs	r0, r0, r4
 80033cc:	eb61 0105 	sbc.w	r1, r1, r5
 80033d0:	f04f 0200 	mov.w	r2, #0
 80033d4:	f04f 0300 	mov.w	r3, #0
 80033d8:	018b      	lsls	r3, r1, #6
 80033da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033de:	0182      	lsls	r2, r0, #6
 80033e0:	1a12      	subs	r2, r2, r0
 80033e2:	eb63 0301 	sbc.w	r3, r3, r1
 80033e6:	f04f 0000 	mov.w	r0, #0
 80033ea:	f04f 0100 	mov.w	r1, #0
 80033ee:	00d9      	lsls	r1, r3, #3
 80033f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033f4:	00d0      	lsls	r0, r2, #3
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	1912      	adds	r2, r2, r4
 80033fc:	eb45 0303 	adc.w	r3, r5, r3
 8003400:	f04f 0000 	mov.w	r0, #0
 8003404:	f04f 0100 	mov.w	r1, #0
 8003408:	0299      	lsls	r1, r3, #10
 800340a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800340e:	0290      	lsls	r0, r2, #10
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	4610      	mov	r0, r2
 8003416:	4619      	mov	r1, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	461a      	mov	r2, r3
 800341c:	f04f 0300 	mov.w	r3, #0
 8003420:	f7fd fac0 	bl	80009a4 <__aeabi_uldivmod>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4613      	mov	r3, r2
 800342a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800342c:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <HAL_RCC_GetSysClockFreq+0x160>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	0c1b      	lsrs	r3, r3, #16
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	3301      	adds	r3, #1
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	fbb2 f3f3 	udiv	r3, r2, r3
 8003444:	60bb      	str	r3, [r7, #8]
      break;
 8003446:	e002      	b.n	800344e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003448:	4b04      	ldr	r3, [pc, #16]	; (800345c <HAL_RCC_GetSysClockFreq+0x164>)
 800344a:	60bb      	str	r3, [r7, #8]
      break;
 800344c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800344e:	68bb      	ldr	r3, [r7, #8]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bdb0      	pop	{r4, r5, r7, pc}
 8003458:	40023800 	.word	0x40023800
 800345c:	00f42400 	.word	0x00f42400
 8003460:	017d7840 	.word	0x017d7840

08003464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003468:	4b03      	ldr	r3, [pc, #12]	; (8003478 <HAL_RCC_GetHCLKFreq+0x14>)
 800346a:	681b      	ldr	r3, [r3, #0]
}
 800346c:	4618      	mov	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	20000004 	.word	0x20000004

0800347c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003480:	f7ff fff0 	bl	8003464 <HAL_RCC_GetHCLKFreq>
 8003484:	4602      	mov	r2, r0
 8003486:	4b05      	ldr	r3, [pc, #20]	; (800349c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	0a9b      	lsrs	r3, r3, #10
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	4903      	ldr	r1, [pc, #12]	; (80034a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003492:	5ccb      	ldrb	r3, [r1, r3]
 8003494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003498:	4618      	mov	r0, r3
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40023800 	.word	0x40023800
 80034a0:	0800452c 	.word	0x0800452c

080034a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e01d      	b.n	80034f2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d106      	bne.n	80034d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fe f9ba 	bl	8001844 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3304      	adds	r3, #4
 80034e0:	4619      	mov	r1, r3
 80034e2:	4610      	mov	r0, r2
 80034e4:	f000 fbb2 	bl	8003c4c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
	...

080034fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2201      	movs	r2, #1
 800350c:	6839      	ldr	r1, [r7, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f000 ff16 	bl	8004340 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a15      	ldr	r2, [pc, #84]	; (8003570 <HAL_TIM_PWM_Start+0x74>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d004      	beq.n	8003528 <HAL_TIM_PWM_Start+0x2c>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a14      	ldr	r2, [pc, #80]	; (8003574 <HAL_TIM_PWM_Start+0x78>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d101      	bne.n	800352c <HAL_TIM_PWM_Start+0x30>
 8003528:	2301      	movs	r3, #1
 800352a:	e000      	b.n	800352e <HAL_TIM_PWM_Start+0x32>
 800352c:	2300      	movs	r3, #0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d007      	beq.n	8003542 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003540:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2b06      	cmp	r3, #6
 8003552:	d007      	beq.n	8003564 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0201 	orr.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40010000 	.word	0x40010000
 8003574:	40010400 	.word	0x40010400

08003578 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e01d      	b.n	80035c6 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d106      	bne.n	80035a4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7fe f900 	bl	80017a4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3304      	adds	r3, #4
 80035b4:	4619      	mov	r1, r3
 80035b6:	4610      	mov	r0, r2
 80035b8:	f000 fb48 	bl	8003c4c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
	...

080035d0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b0c      	cmp	r3, #12
 80035de:	d841      	bhi.n	8003664 <HAL_TIM_IC_Start_IT+0x94>
 80035e0:	a201      	add	r2, pc, #4	; (adr r2, 80035e8 <HAL_TIM_IC_Start_IT+0x18>)
 80035e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e6:	bf00      	nop
 80035e8:	0800361d 	.word	0x0800361d
 80035ec:	08003665 	.word	0x08003665
 80035f0:	08003665 	.word	0x08003665
 80035f4:	08003665 	.word	0x08003665
 80035f8:	0800362f 	.word	0x0800362f
 80035fc:	08003665 	.word	0x08003665
 8003600:	08003665 	.word	0x08003665
 8003604:	08003665 	.word	0x08003665
 8003608:	08003641 	.word	0x08003641
 800360c:	08003665 	.word	0x08003665
 8003610:	08003665 	.word	0x08003665
 8003614:	08003665 	.word	0x08003665
 8003618:	08003653 	.word	0x08003653
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0202 	orr.w	r2, r2, #2
 800362a:	60da      	str	r2, [r3, #12]
      break;
 800362c:	e01b      	b.n	8003666 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 0204 	orr.w	r2, r2, #4
 800363c:	60da      	str	r2, [r3, #12]
      break;
 800363e:	e012      	b.n	8003666 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0208 	orr.w	r2, r2, #8
 800364e:	60da      	str	r2, [r3, #12]
      break;
 8003650:	e009      	b.n	8003666 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0210 	orr.w	r2, r2, #16
 8003660:	60da      	str	r2, [r3, #12]
      break;
 8003662:	e000      	b.n	8003666 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8003664:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2201      	movs	r2, #1
 800366c:	6839      	ldr	r1, [r7, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fe66 	bl	8004340 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b06      	cmp	r3, #6
 8003684:	d007      	beq.n	8003696 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0201 	orr.w	r2, r2, #1
 8003694:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d122      	bne.n	80036fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d11b      	bne.n	80036fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f06f 0202 	mvn.w	r2, #2
 80036cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7fd fb80 	bl	8000de8 <HAL_TIM_IC_CaptureCallback>
 80036e8:	e005      	b.n	80036f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 fa90 	bl	8003c10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 fa97 	bl	8003c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b04      	cmp	r3, #4
 8003708:	d122      	bne.n	8003750 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b04      	cmp	r3, #4
 8003716:	d11b      	bne.n	8003750 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f06f 0204 	mvn.w	r2, #4
 8003720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2202      	movs	r2, #2
 8003726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7fd fb56 	bl	8000de8 <HAL_TIM_IC_CaptureCallback>
 800373c:	e005      	b.n	800374a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fa66 	bl	8003c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 fa6d 	bl	8003c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b08      	cmp	r3, #8
 800375c:	d122      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f003 0308 	and.w	r3, r3, #8
 8003768:	2b08      	cmp	r3, #8
 800376a:	d11b      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f06f 0208 	mvn.w	r2, #8
 8003774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2204      	movs	r2, #4
 800377a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	f003 0303 	and.w	r3, r3, #3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7fd fb2c 	bl	8000de8 <HAL_TIM_IC_CaptureCallback>
 8003790:	e005      	b.n	800379e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 fa3c 	bl	8003c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 fa43 	bl	8003c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	f003 0310 	and.w	r3, r3, #16
 80037ae:	2b10      	cmp	r3, #16
 80037b0:	d122      	bne.n	80037f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f003 0310 	and.w	r3, r3, #16
 80037bc:	2b10      	cmp	r3, #16
 80037be:	d11b      	bne.n	80037f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f06f 0210 	mvn.w	r2, #16
 80037c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2208      	movs	r2, #8
 80037ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7fd fb02 	bl	8000de8 <HAL_TIM_IC_CaptureCallback>
 80037e4:	e005      	b.n	80037f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fa12 	bl	8003c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 fa19 	bl	8003c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b01      	cmp	r3, #1
 8003804:	d10e      	bne.n	8003824 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b01      	cmp	r3, #1
 8003812:	d107      	bne.n	8003824 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f06f 0201 	mvn.w	r2, #1
 800381c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f9ec 	bl	8003bfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382e:	2b80      	cmp	r3, #128	; 0x80
 8003830:	d10e      	bne.n	8003850 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383c:	2b80      	cmp	r3, #128	; 0x80
 800383e:	d107      	bne.n	8003850 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fe24 	bl	8004498 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385a:	2b40      	cmp	r3, #64	; 0x40
 800385c:	d10e      	bne.n	800387c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003868:	2b40      	cmp	r3, #64	; 0x40
 800386a:	d107      	bne.n	800387c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f9de 	bl	8003c38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	f003 0320 	and.w	r3, r3, #32
 8003886:	2b20      	cmp	r3, #32
 8003888:	d10e      	bne.n	80038a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b20      	cmp	r3, #32
 8003896:	d107      	bne.n	80038a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f06f 0220 	mvn.w	r2, #32
 80038a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 fdee 	bl	8004484 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038a8:	bf00      	nop
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d101      	bne.n	80038ca <HAL_TIM_IC_ConfigChannel+0x1a>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e08a      	b.n	80039e0 <HAL_TIM_IC_ConfigChannel+0x130>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2202      	movs	r2, #2
 80038d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d11b      	bne.n	8003918 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6818      	ldr	r0, [r3, #0]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	6819      	ldr	r1, [r3, #0]
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f000 fbfc 	bl	80040ec <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699a      	ldr	r2, [r3, #24]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 020c 	bic.w	r2, r2, #12
 8003902:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6999      	ldr	r1, [r3, #24]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	619a      	str	r2, [r3, #24]
 8003916:	e05a      	b.n	80039ce <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b04      	cmp	r3, #4
 800391c:	d11c      	bne.n	8003958 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6818      	ldr	r0, [r3, #0]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	6819      	ldr	r1, [r3, #0]
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f000 fc51 	bl	80041d4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	699a      	ldr	r2, [r3, #24]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003940:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6999      	ldr	r1, [r3, #24]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	021a      	lsls	r2, r3, #8
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	619a      	str	r2, [r3, #24]
 8003956:	e03a      	b.n	80039ce <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b08      	cmp	r3, #8
 800395c:	d11b      	bne.n	8003996 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	6819      	ldr	r1, [r3, #0]
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f000 fc6e 	bl	800424e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	69da      	ldr	r2, [r3, #28]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 020c 	bic.w	r2, r2, #12
 8003980:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	69d9      	ldr	r1, [r3, #28]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	61da      	str	r2, [r3, #28]
 8003994:	e01b      	b.n	80039ce <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	6819      	ldr	r1, [r3, #0]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f000 fc8e 	bl	80042c6 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69da      	ldr	r2, [r3, #28]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80039b8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69d9      	ldr	r1, [r3, #28]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	021a      	lsls	r2, r3, #8
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80039fe:	2302      	movs	r3, #2
 8003a00:	e0b4      	b.n	8003b6c <HAL_TIM_PWM_ConfigChannel+0x184>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b0c      	cmp	r3, #12
 8003a16:	f200 809f 	bhi.w	8003b58 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003a1a:	a201      	add	r2, pc, #4	; (adr r2, 8003a20 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a20:	08003a55 	.word	0x08003a55
 8003a24:	08003b59 	.word	0x08003b59
 8003a28:	08003b59 	.word	0x08003b59
 8003a2c:	08003b59 	.word	0x08003b59
 8003a30:	08003a95 	.word	0x08003a95
 8003a34:	08003b59 	.word	0x08003b59
 8003a38:	08003b59 	.word	0x08003b59
 8003a3c:	08003b59 	.word	0x08003b59
 8003a40:	08003ad7 	.word	0x08003ad7
 8003a44:	08003b59 	.word	0x08003b59
 8003a48:	08003b59 	.word	0x08003b59
 8003a4c:	08003b59 	.word	0x08003b59
 8003a50:	08003b17 	.word	0x08003b17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68b9      	ldr	r1, [r7, #8]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 f996 	bl	8003d8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699a      	ldr	r2, [r3, #24]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0208 	orr.w	r2, r2, #8
 8003a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699a      	ldr	r2, [r3, #24]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0204 	bic.w	r2, r2, #4
 8003a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6999      	ldr	r1, [r3, #24]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	619a      	str	r2, [r3, #24]
      break;
 8003a92:	e062      	b.n	8003b5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68b9      	ldr	r1, [r7, #8]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 f9e6 	bl	8003e6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699a      	ldr	r2, [r3, #24]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6999      	ldr	r1, [r3, #24]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	021a      	lsls	r2, r3, #8
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	619a      	str	r2, [r3, #24]
      break;
 8003ad4:	e041      	b.n	8003b5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68b9      	ldr	r1, [r7, #8]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 fa3b 	bl	8003f58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69da      	ldr	r2, [r3, #28]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f042 0208 	orr.w	r2, r2, #8
 8003af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69da      	ldr	r2, [r3, #28]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0204 	bic.w	r2, r2, #4
 8003b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69d9      	ldr	r1, [r3, #28]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	691a      	ldr	r2, [r3, #16]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	61da      	str	r2, [r3, #28]
      break;
 8003b14:	e021      	b.n	8003b5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68b9      	ldr	r1, [r7, #8]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 fa8f 	bl	8004040 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69da      	ldr	r2, [r3, #28]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69da      	ldr	r2, [r3, #28]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69d9      	ldr	r1, [r3, #28]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	021a      	lsls	r2, r3, #8
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	61da      	str	r2, [r3, #28]
      break;
 8003b56:	e000      	b.n	8003b5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003b58:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b0c      	cmp	r3, #12
 8003b86:	d831      	bhi.n	8003bec <HAL_TIM_ReadCapturedValue+0x78>
 8003b88:	a201      	add	r2, pc, #4	; (adr r2, 8003b90 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8e:	bf00      	nop
 8003b90:	08003bc5 	.word	0x08003bc5
 8003b94:	08003bed 	.word	0x08003bed
 8003b98:	08003bed 	.word	0x08003bed
 8003b9c:	08003bed 	.word	0x08003bed
 8003ba0:	08003bcf 	.word	0x08003bcf
 8003ba4:	08003bed 	.word	0x08003bed
 8003ba8:	08003bed 	.word	0x08003bed
 8003bac:	08003bed 	.word	0x08003bed
 8003bb0:	08003bd9 	.word	0x08003bd9
 8003bb4:	08003bed 	.word	0x08003bed
 8003bb8:	08003bed 	.word	0x08003bed
 8003bbc:	08003bed 	.word	0x08003bed
 8003bc0:	08003be3 	.word	0x08003be3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bca:	60fb      	str	r3, [r7, #12]

      break;
 8003bcc:	e00f      	b.n	8003bee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd4:	60fb      	str	r3, [r7, #12]

      break;
 8003bd6:	e00a      	b.n	8003bee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bde:	60fb      	str	r3, [r7, #12]

      break;
 8003be0:	e005      	b.n	8003bee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	60fb      	str	r3, [r7, #12]

      break;
 8003bea:	e000      	b.n	8003bee <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003bec:	bf00      	nop
  }

  return tmpreg;
 8003bee:	68fb      	ldr	r3, [r7, #12]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a40      	ldr	r2, [pc, #256]	; (8003d60 <TIM_Base_SetConfig+0x114>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d013      	beq.n	8003c8c <TIM_Base_SetConfig+0x40>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c6a:	d00f      	beq.n	8003c8c <TIM_Base_SetConfig+0x40>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a3d      	ldr	r2, [pc, #244]	; (8003d64 <TIM_Base_SetConfig+0x118>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d00b      	beq.n	8003c8c <TIM_Base_SetConfig+0x40>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a3c      	ldr	r2, [pc, #240]	; (8003d68 <TIM_Base_SetConfig+0x11c>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d007      	beq.n	8003c8c <TIM_Base_SetConfig+0x40>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a3b      	ldr	r2, [pc, #236]	; (8003d6c <TIM_Base_SetConfig+0x120>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d003      	beq.n	8003c8c <TIM_Base_SetConfig+0x40>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a3a      	ldr	r2, [pc, #232]	; (8003d70 <TIM_Base_SetConfig+0x124>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d108      	bne.n	8003c9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a2f      	ldr	r2, [pc, #188]	; (8003d60 <TIM_Base_SetConfig+0x114>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d02b      	beq.n	8003cfe <TIM_Base_SetConfig+0xb2>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cac:	d027      	beq.n	8003cfe <TIM_Base_SetConfig+0xb2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a2c      	ldr	r2, [pc, #176]	; (8003d64 <TIM_Base_SetConfig+0x118>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d023      	beq.n	8003cfe <TIM_Base_SetConfig+0xb2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a2b      	ldr	r2, [pc, #172]	; (8003d68 <TIM_Base_SetConfig+0x11c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d01f      	beq.n	8003cfe <TIM_Base_SetConfig+0xb2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a2a      	ldr	r2, [pc, #168]	; (8003d6c <TIM_Base_SetConfig+0x120>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d01b      	beq.n	8003cfe <TIM_Base_SetConfig+0xb2>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a29      	ldr	r2, [pc, #164]	; (8003d70 <TIM_Base_SetConfig+0x124>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d017      	beq.n	8003cfe <TIM_Base_SetConfig+0xb2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a28      	ldr	r2, [pc, #160]	; (8003d74 <TIM_Base_SetConfig+0x128>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d013      	beq.n	8003cfe <TIM_Base_SetConfig+0xb2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a27      	ldr	r2, [pc, #156]	; (8003d78 <TIM_Base_SetConfig+0x12c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00f      	beq.n	8003cfe <TIM_Base_SetConfig+0xb2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a26      	ldr	r2, [pc, #152]	; (8003d7c <TIM_Base_SetConfig+0x130>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d00b      	beq.n	8003cfe <TIM_Base_SetConfig+0xb2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a25      	ldr	r2, [pc, #148]	; (8003d80 <TIM_Base_SetConfig+0x134>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d007      	beq.n	8003cfe <TIM_Base_SetConfig+0xb2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a24      	ldr	r2, [pc, #144]	; (8003d84 <TIM_Base_SetConfig+0x138>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d003      	beq.n	8003cfe <TIM_Base_SetConfig+0xb2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a23      	ldr	r2, [pc, #140]	; (8003d88 <TIM_Base_SetConfig+0x13c>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d108      	bne.n	8003d10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a0a      	ldr	r2, [pc, #40]	; (8003d60 <TIM_Base_SetConfig+0x114>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d003      	beq.n	8003d44 <TIM_Base_SetConfig+0xf8>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a0c      	ldr	r2, [pc, #48]	; (8003d70 <TIM_Base_SetConfig+0x124>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d103      	bne.n	8003d4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	691a      	ldr	r2, [r3, #16]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	615a      	str	r2, [r3, #20]
}
 8003d52:	bf00      	nop
 8003d54:	3714      	adds	r7, #20
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	40010000 	.word	0x40010000
 8003d64:	40000400 	.word	0x40000400
 8003d68:	40000800 	.word	0x40000800
 8003d6c:	40000c00 	.word	0x40000c00
 8003d70:	40010400 	.word	0x40010400
 8003d74:	40014000 	.word	0x40014000
 8003d78:	40014400 	.word	0x40014400
 8003d7c:	40014800 	.word	0x40014800
 8003d80:	40001800 	.word	0x40001800
 8003d84:	40001c00 	.word	0x40001c00
 8003d88:	40002000 	.word	0x40002000

08003d8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	f023 0201 	bic.w	r2, r3, #1
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f023 0303 	bic.w	r3, r3, #3
 8003dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f023 0302 	bic.w	r3, r3, #2
 8003dd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a20      	ldr	r2, [pc, #128]	; (8003e64 <TIM_OC1_SetConfig+0xd8>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d003      	beq.n	8003df0 <TIM_OC1_SetConfig+0x64>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a1f      	ldr	r2, [pc, #124]	; (8003e68 <TIM_OC1_SetConfig+0xdc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d10c      	bne.n	8003e0a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f023 0308 	bic.w	r3, r3, #8
 8003df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f023 0304 	bic.w	r3, r3, #4
 8003e08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a15      	ldr	r2, [pc, #84]	; (8003e64 <TIM_OC1_SetConfig+0xd8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d003      	beq.n	8003e1a <TIM_OC1_SetConfig+0x8e>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a14      	ldr	r2, [pc, #80]	; (8003e68 <TIM_OC1_SetConfig+0xdc>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d111      	bne.n	8003e3e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	621a      	str	r2, [r3, #32]
}
 8003e58:	bf00      	nop
 8003e5a:	371c      	adds	r7, #28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	40010000 	.word	0x40010000
 8003e68:	40010400 	.word	0x40010400

08003e6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	f023 0210 	bic.w	r2, r3, #16
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	021b      	lsls	r3, r3, #8
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f023 0320 	bic.w	r3, r3, #32
 8003eb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	011b      	lsls	r3, r3, #4
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a22      	ldr	r2, [pc, #136]	; (8003f50 <TIM_OC2_SetConfig+0xe4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d003      	beq.n	8003ed4 <TIM_OC2_SetConfig+0x68>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a21      	ldr	r2, [pc, #132]	; (8003f54 <TIM_OC2_SetConfig+0xe8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d10d      	bne.n	8003ef0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a17      	ldr	r2, [pc, #92]	; (8003f50 <TIM_OC2_SetConfig+0xe4>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d003      	beq.n	8003f00 <TIM_OC2_SetConfig+0x94>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a16      	ldr	r2, [pc, #88]	; (8003f54 <TIM_OC2_SetConfig+0xe8>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d113      	bne.n	8003f28 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	621a      	str	r2, [r3, #32]
}
 8003f42:	bf00      	nop
 8003f44:	371c      	adds	r7, #28
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	40010000 	.word	0x40010000
 8003f54:	40010400 	.word	0x40010400

08003f58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0303 	bic.w	r3, r3, #3
 8003f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	021b      	lsls	r3, r3, #8
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a21      	ldr	r2, [pc, #132]	; (8004038 <TIM_OC3_SetConfig+0xe0>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d003      	beq.n	8003fbe <TIM_OC3_SetConfig+0x66>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a20      	ldr	r2, [pc, #128]	; (800403c <TIM_OC3_SetConfig+0xe4>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d10d      	bne.n	8003fda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	021b      	lsls	r3, r3, #8
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a16      	ldr	r2, [pc, #88]	; (8004038 <TIM_OC3_SetConfig+0xe0>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d003      	beq.n	8003fea <TIM_OC3_SetConfig+0x92>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a15      	ldr	r2, [pc, #84]	; (800403c <TIM_OC3_SetConfig+0xe4>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d113      	bne.n	8004012 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	011b      	lsls	r3, r3, #4
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	4313      	orrs	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	621a      	str	r2, [r3, #32]
}
 800402c:	bf00      	nop
 800402e:	371c      	adds	r7, #28
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	40010000 	.word	0x40010000
 800403c:	40010400 	.word	0x40010400

08004040 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004040:	b480      	push	{r7}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800406e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	021b      	lsls	r3, r3, #8
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4313      	orrs	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800408a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	031b      	lsls	r3, r3, #12
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4313      	orrs	r3, r2
 8004096:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a12      	ldr	r2, [pc, #72]	; (80040e4 <TIM_OC4_SetConfig+0xa4>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d003      	beq.n	80040a8 <TIM_OC4_SetConfig+0x68>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a11      	ldr	r2, [pc, #68]	; (80040e8 <TIM_OC4_SetConfig+0xa8>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d109      	bne.n	80040bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	019b      	lsls	r3, r3, #6
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	621a      	str	r2, [r3, #32]
}
 80040d6:	bf00      	nop
 80040d8:	371c      	adds	r7, #28
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	40010000 	.word	0x40010000
 80040e8:	40010400 	.word	0x40010400

080040ec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
 80040f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	f023 0201 	bic.w	r2, r3, #1
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	4a28      	ldr	r2, [pc, #160]	; (80041b8 <TIM_TI1_SetConfig+0xcc>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d01b      	beq.n	8004152 <TIM_TI1_SetConfig+0x66>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004120:	d017      	beq.n	8004152 <TIM_TI1_SetConfig+0x66>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	4a25      	ldr	r2, [pc, #148]	; (80041bc <TIM_TI1_SetConfig+0xd0>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d013      	beq.n	8004152 <TIM_TI1_SetConfig+0x66>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	4a24      	ldr	r2, [pc, #144]	; (80041c0 <TIM_TI1_SetConfig+0xd4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d00f      	beq.n	8004152 <TIM_TI1_SetConfig+0x66>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4a23      	ldr	r2, [pc, #140]	; (80041c4 <TIM_TI1_SetConfig+0xd8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d00b      	beq.n	8004152 <TIM_TI1_SetConfig+0x66>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	4a22      	ldr	r2, [pc, #136]	; (80041c8 <TIM_TI1_SetConfig+0xdc>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d007      	beq.n	8004152 <TIM_TI1_SetConfig+0x66>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	4a21      	ldr	r2, [pc, #132]	; (80041cc <TIM_TI1_SetConfig+0xe0>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d003      	beq.n	8004152 <TIM_TI1_SetConfig+0x66>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4a20      	ldr	r2, [pc, #128]	; (80041d0 <TIM_TI1_SetConfig+0xe4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d101      	bne.n	8004156 <TIM_TI1_SetConfig+0x6a>
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <TIM_TI1_SetConfig+0x6c>
 8004156:	2300      	movs	r3, #0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d008      	beq.n	800416e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f023 0303 	bic.w	r3, r3, #3
 8004162:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4313      	orrs	r3, r2
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	e003      	b.n	8004176 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f043 0301 	orr.w	r3, r3, #1
 8004174:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800417c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	b2db      	uxtb	r3, r3
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	4313      	orrs	r3, r2
 8004188:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f023 030a 	bic.w	r3, r3, #10
 8004190:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	f003 030a 	and.w	r3, r3, #10
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	621a      	str	r2, [r3, #32]
}
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40010000 	.word	0x40010000
 80041bc:	40000400 	.word	0x40000400
 80041c0:	40000800 	.word	0x40000800
 80041c4:	40000c00 	.word	0x40000c00
 80041c8:	40010400 	.word	0x40010400
 80041cc:	40014000 	.word	0x40014000
 80041d0:	40001800 	.word	0x40001800

080041d4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	f023 0210 	bic.w	r2, r3, #16
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004200:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	021b      	lsls	r3, r3, #8
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004212:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	031b      	lsls	r3, r3, #12
 8004218:	b29b      	uxth	r3, r3
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	4313      	orrs	r3, r2
 800421e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004226:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	4313      	orrs	r3, r2
 8004234:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	621a      	str	r2, [r3, #32]
}
 8004242:	bf00      	nop
 8004244:	371c      	adds	r7, #28
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800424e:	b480      	push	{r7}
 8004250:	b087      	sub	sp, #28
 8004252:	af00      	add	r7, sp, #0
 8004254:	60f8      	str	r0, [r7, #12]
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	607a      	str	r2, [r7, #4]
 800425a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f023 0303 	bic.w	r3, r3, #3
 800427a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4313      	orrs	r3, r2
 8004282:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800428a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	b2db      	uxtb	r3, r3
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4313      	orrs	r3, r2
 8004296:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800429e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	021b      	lsls	r3, r3, #8
 80042a4:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	621a      	str	r2, [r3, #32]
}
 80042ba:	bf00      	nop
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b087      	sub	sp, #28
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	607a      	str	r2, [r7, #4]
 80042d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	021b      	lsls	r3, r3, #8
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004304:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	031b      	lsls	r3, r3, #12
 800430a:	b29b      	uxth	r3, r3
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	4313      	orrs	r3, r2
 8004310:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004318:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	031b      	lsls	r3, r3, #12
 800431e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	621a      	str	r2, [r3, #32]
}
 8004334:	bf00      	nop
 8004336:	371c      	adds	r7, #28
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004340:	b480      	push	{r7}
 8004342:	b087      	sub	sp, #28
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f003 031f 	and.w	r3, r3, #31
 8004352:	2201      	movs	r2, #1
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a1a      	ldr	r2, [r3, #32]
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	43db      	mvns	r3, r3
 8004362:	401a      	ands	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6a1a      	ldr	r2, [r3, #32]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	f003 031f 	and.w	r3, r3, #31
 8004372:	6879      	ldr	r1, [r7, #4]
 8004374:	fa01 f303 	lsl.w	r3, r1, r3
 8004378:	431a      	orrs	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	621a      	str	r2, [r3, #32]
}
 800437e:	bf00      	nop
 8004380:	371c      	adds	r7, #28
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
	...

0800438c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043a0:	2302      	movs	r3, #2
 80043a2:	e05a      	b.n	800445a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a21      	ldr	r2, [pc, #132]	; (8004468 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d022      	beq.n	800442e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f0:	d01d      	beq.n	800442e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a1d      	ldr	r2, [pc, #116]	; (800446c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d018      	beq.n	800442e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a1b      	ldr	r2, [pc, #108]	; (8004470 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d013      	beq.n	800442e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a1a      	ldr	r2, [pc, #104]	; (8004474 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d00e      	beq.n	800442e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a18      	ldr	r2, [pc, #96]	; (8004478 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d009      	beq.n	800442e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a17      	ldr	r2, [pc, #92]	; (800447c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d004      	beq.n	800442e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a15      	ldr	r2, [pc, #84]	; (8004480 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d10c      	bne.n	8004448 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004434:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	4313      	orrs	r3, r2
 800443e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	40010000 	.word	0x40010000
 800446c:	40000400 	.word	0x40000400
 8004470:	40000800 	.word	0x40000800
 8004474:	40000c00 	.word	0x40000c00
 8004478:	40010400 	.word	0x40010400
 800447c:	40014000 	.word	0x40014000
 8004480:	40001800 	.word	0x40001800

08004484 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <__libc_init_array>:
 80044ac:	b570      	push	{r4, r5, r6, lr}
 80044ae:	4d0d      	ldr	r5, [pc, #52]	; (80044e4 <__libc_init_array+0x38>)
 80044b0:	4c0d      	ldr	r4, [pc, #52]	; (80044e8 <__libc_init_array+0x3c>)
 80044b2:	1b64      	subs	r4, r4, r5
 80044b4:	10a4      	asrs	r4, r4, #2
 80044b6:	2600      	movs	r6, #0
 80044b8:	42a6      	cmp	r6, r4
 80044ba:	d109      	bne.n	80044d0 <__libc_init_array+0x24>
 80044bc:	4d0b      	ldr	r5, [pc, #44]	; (80044ec <__libc_init_array+0x40>)
 80044be:	4c0c      	ldr	r4, [pc, #48]	; (80044f0 <__libc_init_array+0x44>)
 80044c0:	f000 f820 	bl	8004504 <_init>
 80044c4:	1b64      	subs	r4, r4, r5
 80044c6:	10a4      	asrs	r4, r4, #2
 80044c8:	2600      	movs	r6, #0
 80044ca:	42a6      	cmp	r6, r4
 80044cc:	d105      	bne.n	80044da <__libc_init_array+0x2e>
 80044ce:	bd70      	pop	{r4, r5, r6, pc}
 80044d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80044d4:	4798      	blx	r3
 80044d6:	3601      	adds	r6, #1
 80044d8:	e7ee      	b.n	80044b8 <__libc_init_array+0xc>
 80044da:	f855 3b04 	ldr.w	r3, [r5], #4
 80044de:	4798      	blx	r3
 80044e0:	3601      	adds	r6, #1
 80044e2:	e7f2      	b.n	80044ca <__libc_init_array+0x1e>
 80044e4:	0800453c 	.word	0x0800453c
 80044e8:	0800453c 	.word	0x0800453c
 80044ec:	0800453c 	.word	0x0800453c
 80044f0:	08004540 	.word	0x08004540

080044f4 <memset>:
 80044f4:	4402      	add	r2, r0
 80044f6:	4603      	mov	r3, r0
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d100      	bne.n	80044fe <memset+0xa>
 80044fc:	4770      	bx	lr
 80044fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004502:	e7f9      	b.n	80044f8 <memset+0x4>

08004504 <_init>:
 8004504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004506:	bf00      	nop
 8004508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800450a:	bc08      	pop	{r3}
 800450c:	469e      	mov	lr, r3
 800450e:	4770      	bx	lr

08004510 <_fini>:
 8004510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004512:	bf00      	nop
 8004514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004516:	bc08      	pop	{r3}
 8004518:	469e      	mov	lr, r3
 800451a:	4770      	bx	lr
